
E:\src\Repos\RetroSpy\firmware\Output\Teensy_3_5\Debug/firmware.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
       0:	f8 ff 02 20 99 01 00 00 e9 04 00 00 a1 04 00 00     ... ............
      10:	a1 04 00 00 a1 04 00 00 a1 04 00 00 a1 04 00 00     ................
      20:	a1 04 00 00 a1 04 00 00 a1 04 00 00 e9 04 00 00     ................
      30:	e9 04 00 00 a1 04 00 00 b5 18 00 00 b9 19 00 00     ................
      40:	e9 04 00 00 e9 04 00 00 e9 04 00 00 e9 04 00 00     ................
      50:	e9 04 00 00 e9 04 00 00 e9 04 00 00 e9 04 00 00     ................
      60:	e9 04 00 00 e9 04 00 00 e9 04 00 00 e9 04 00 00     ................
      70:	e9 04 00 00 e9 04 00 00 e9 04 00 00 e9 04 00 00     ................
      80:	e9 04 00 00 e9 04 00 00 e9 04 00 00 e9 04 00 00     ................
      90:	e9 04 00 00 e9 04 00 00 e9 04 00 00 e9 04 00 00     ................
      a0:	e9 04 00 00 e9 04 00 00 e9 04 00 00 e9 04 00 00     ................
      b0:	e9 04 00 00 e9 04 00 00 e9 04 00 00 05 08 00 00     ................
      c0:	e9 04 00 00 e1 1a 00 00 e9 04 00 00 0d 1c 00 00     ................
      d0:	e9 04 00 00 05 1d 00 00 e9 04 00 00 e9 04 00 00     ................
      e0:	e9 04 00 00 e9 04 00 00 e9 04 00 00 e9 04 00 00     ................
      f0:	e9 04 00 00 e9 04 00 00 e9 04 00 00 e9 04 00 00     ................
     100:	e9 04 00 00 e9 04 00 00 e9 04 00 00 e9 04 00 00     ................
     110:	e9 04 00 00 5d 0a 00 00 e9 04 00 00 e9 04 00 00     ....]...........
     120:	e9 04 00 00 e9 04 00 00 e9 04 00 00 e9 04 00 00     ................
     130:	e9 04 00 00 e9 04 00 00 e9 04 00 00 e9 04 00 00     ................
     140:	e9 04 00 00 e9 04 00 00 fd 1d 00 00 e9 04 00 00     ................
     150:	f5 1e 00 00 e9 04 00 00 e9 04 00 00 e9 04 00 00     ................
     160:	e9 04 00 00 e9 04 00 00 e9 04 00 00 e9 04 00 00     ................
     170:	e9 04 00 00 e9 04 00 00 e9 04 00 00 e9 04 00 00     ................
     180:	e9 04 00 00 e9 04 00 00 e9 04 00 00 e9 04 00 00     ................
     190:	e9 04 00 00 e9 04 00 00                             ........

00000198 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     198:	4b58      	ldr	r3, [pc, #352]	; (2fc <ResetHandler+0x164>)
     19a:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     19e:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1a0:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1a2:	f64d 1228 	movw	r2, #55592	; 0xd928
     1a6:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1a8:	bf00      	nop
	__asm__ volatile ("nop");
     1aa:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1ac:	f000 f9a0 	bl	4f0 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1b0:	4b53      	ldr	r3, [pc, #332]	; (300 <ResetHandler+0x168>)
     1b2:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
     1b6:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1b8:	4a52      	ldr	r2, [pc, #328]	; (304 <ResetHandler+0x16c>)
     1ba:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1bc:	4a52      	ldr	r2, [pc, #328]	; (308 <ResetHandler+0x170>)
     1be:	60da      	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1c0:	4b52      	ldr	r3, [pc, #328]	; (30c <ResetHandler+0x174>)
     1c2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
     1c6:	601a      	str	r2, [r3, #0]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1c8:	4a51      	ldr	r2, [pc, #324]	; (310 <ResetHandler+0x178>)
     1ca:	6813      	ldr	r3, [r2, #0]
     1cc:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1d0:	d104      	bne.n	1dc <ResetHandler+0x44>
		RTC_SR = 0;
     1d2:	4950      	ldr	r1, [pc, #320]	; (314 <ResetHandler+0x17c>)
     1d4:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1d6:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1da:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1dc:	4b4e      	ldr	r3, [pc, #312]	; (318 <ResetHandler+0x180>)
     1de:	781a      	ldrb	r2, [r3, #0]
     1e0:	0711      	lsls	r1, r2, #28
     1e2:	d503      	bpl.n	1ec <ResetHandler+0x54>
     1e4:	781a      	ldrb	r2, [r3, #0]
     1e6:	f042 0208 	orr.w	r2, r2, #8
     1ea:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     1ec:	4b4b      	ldr	r3, [pc, #300]	; (31c <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     1ee:	494c      	ldr	r1, [pc, #304]	; (320 <ResetHandler+0x188>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     1f0:	222a      	movs	r2, #42	; 0x2a
     1f2:	701a      	strb	r2, [r3, #0]
     1f4:	4a4b      	ldr	r2, [pc, #300]	; (324 <ResetHandler+0x18c>)
     1f6:	4b4c      	ldr	r3, [pc, #304]	; (328 <ResetHandler+0x190>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     1f8:	428b      	cmp	r3, r1
     1fa:	d204      	bcs.n	206 <ResetHandler+0x6e>
     1fc:	f852 0f04 	ldr.w	r0, [r2, #4]!
     200:	f843 0b04 	str.w	r0, [r3], #4
     204:	e7f8      	b.n	1f8 <ResetHandler+0x60>
     206:	4b49      	ldr	r3, [pc, #292]	; (32c <ResetHandler+0x194>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     208:	4949      	ldr	r1, [pc, #292]	; (330 <ResetHandler+0x198>)
     20a:	2200      	movs	r2, #0
     20c:	428b      	cmp	r3, r1
     20e:	d202      	bcs.n	216 <ResetHandler+0x7e>
     210:	f843 2b04 	str.w	r2, [r3], #4
     214:	e7fa      	b.n	20c <ResetHandler+0x74>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     216:	4947      	ldr	r1, [pc, #284]	; (334 <ResetHandler+0x19c>)
     218:	4a47      	ldr	r2, [pc, #284]	; (338 <ResetHandler+0x1a0>)
     21a:	2300      	movs	r3, #0
     21c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     220:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     224:	3301      	adds	r3, #1
     226:	2b66      	cmp	r3, #102	; 0x66
     228:	d1f8      	bne.n	21c <ResetHandler+0x84>
     22a:	4b44      	ldr	r3, [pc, #272]	; (33c <ResetHandler+0x1a4>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     22c:	4a44      	ldr	r2, [pc, #272]	; (340 <ResetHandler+0x1a8>)
     22e:	2180      	movs	r1, #128	; 0x80
     230:	f803 1b01 	strb.w	r1, [r3], #1
     234:	4293      	cmp	r3, r2
     236:	d1fb      	bne.n	230 <ResetHandler+0x98>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     238:	4b42      	ldr	r3, [pc, #264]	; (344 <ResetHandler+0x1ac>)
     23a:	4a3e      	ldr	r2, [pc, #248]	; (334 <ResetHandler+0x19c>)
     23c:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     23e:	4b42      	ldr	r3, [pc, #264]	; (348 <ResetHandler+0x1b0>)
     240:	228a      	movs	r2, #138	; 0x8a
     242:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     244:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     248:	2224      	movs	r2, #36	; 0x24
     24a:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     24c:	22a0      	movs	r2, #160	; 0xa0
     24e:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     250:	799a      	ldrb	r2, [r3, #6]
     252:	0792      	lsls	r2, r2, #30
     254:	d5fc      	bpl.n	250 <ResetHandler+0xb8>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     256:	799a      	ldrb	r2, [r3, #6]
     258:	06d4      	lsls	r4, r2, #27
     25a:	d4fc      	bmi.n	256 <ResetHandler+0xbe>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     25c:	4a3b      	ldr	r2, [pc, #236]	; (34c <ResetHandler+0x1b4>)
     25e:	7993      	ldrb	r3, [r2, #6]
     260:	f003 030c 	and.w	r3, r3, #12
     264:	2b08      	cmp	r3, #8
     266:	4b39      	ldr	r3, [pc, #228]	; (34c <ResetHandler+0x1b4>)
     268:	d1f9      	bne.n	25e <ResetHandler+0xc6>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     26a:	2203      	movs	r2, #3
     26c:	711a      	strb	r2, [r3, #4]
    #if F_CPU == 168000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(18); // config PLL for 168 MHz output
    #elif F_CPU == 144000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(12); // config PLL for 144 MHz output
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
     26e:	2246      	movs	r2, #70	; 0x46
     270:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	0690      	lsls	r0, r2, #26
     276:	d5fc      	bpl.n	272 <ResetHandler+0xda>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     278:	4a34      	ldr	r2, [pc, #208]	; (34c <ResetHandler+0x1b4>)
     27a:	7991      	ldrb	r1, [r2, #6]
     27c:	4b33      	ldr	r3, [pc, #204]	; (34c <ResetHandler+0x1b4>)
     27e:	0649      	lsls	r1, r1, #25
     280:	d5fb      	bpl.n	27a <ResetHandler+0xe2>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(2);
#elif F_CPU == 120000000
	// config divisors: 120 MHz core, 60 MHz bus, 24 MHz flash, USB = 128 * 2 / 5
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(4);
     282:	4a33      	ldr	r2, [pc, #204]	; (350 <ResetHandler+0x1b8>)
     284:	f04f 7182 	mov.w	r1, #17039360	; 0x1040000
     288:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 120000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(4);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
     28a:	2109      	movs	r1, #9
     28c:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     28e:	2220      	movs	r2, #32
     290:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     292:	799a      	ldrb	r2, [r3, #6]
     294:	f002 020c 	and.w	r2, r2, #12
     298:	2a0c      	cmp	r2, #12
     29a:	d1fa      	bne.n	292 <ResetHandler+0xfa>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     29c:	4b2d      	ldr	r3, [pc, #180]	; (354 <ResetHandler+0x1bc>)
     29e:	4a2e      	ldr	r2, [pc, #184]	; (358 <ResetHandler+0x1c0>)
     2a0:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2a2:	4b2e      	ldr	r3, [pc, #184]	; (35c <ResetHandler+0x1c4>)
     2a4:	4a2e      	ldr	r2, [pc, #184]	; (360 <ResetHandler+0x1c8>)
     2a6:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2a8:	2200      	movs	r2, #0
     2aa:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2ac:	2207      	movs	r2, #7
     2ae:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2b2:	4a2c      	ldr	r2, [pc, #176]	; (364 <ResetHandler+0x1cc>)
     2b4:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2b8:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2ba:	f000 f9ff 	bl	6bc <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2be:	4b15      	ldr	r3, [pc, #84]	; (314 <ResetHandler+0x17c>)
     2c0:	681b      	ldr	r3, [r3, #0]
     2c2:	07da      	lsls	r2, r3, #31
     2c4:	d505      	bpl.n	2d2 <ResetHandler+0x13a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2c6:	4828      	ldr	r0, [pc, #160]	; (368 <ResetHandler+0x1d0>)
     2c8:	f000 f992 	bl	5f0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2cc:	4b27      	ldr	r3, [pc, #156]	; (36c <ResetHandler+0x1d4>)
     2ce:	4a28      	ldr	r2, [pc, #160]	; (370 <ResetHandler+0x1d8>)
     2d0:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2d2:	4b28      	ldr	r3, [pc, #160]	; (374 <ResetHandler+0x1dc>)
     2d4:	781b      	ldrb	r3, [r3, #0]
     2d6:	065b      	lsls	r3, r3, #25
     2d8:	d509      	bpl.n	2ee <ResetHandler+0x156>
     2da:	4c24      	ldr	r4, [pc, #144]	; (36c <ResetHandler+0x1d4>)
     2dc:	4b24      	ldr	r3, [pc, #144]	; (370 <ResetHandler+0x1d8>)
     2de:	6822      	ldr	r2, [r4, #0]
     2e0:	429a      	cmp	r2, r3
     2e2:	d104      	bne.n	2ee <ResetHandler+0x156>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e4:	4820      	ldr	r0, [pc, #128]	; (368 <ResetHandler+0x1d0>)
     2e6:	f000 f983 	bl	5f0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     2ea:	2300      	movs	r3, #0
     2ec:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     2ee:	f001 feb1 	bl	2054 <__libc_init_array>

	startup_late_hook();
     2f2:	f000 f903 	bl	4fc <startup_late_hook>
	main();
     2f6:	f000 f8cb 	bl	490 <main>
     2fa:	e7fe      	b.n	2fa <ResetHandler+0x162>
     2fc:	4005200e 	.word	0x4005200e
     300:	40048030 	.word	0x40048030
     304:	00043f82 	.word	0x00043f82
     308:	2b000001 	.word	0x2b000001
     30c:	e000ed88 	.word	0xe000ed88
     310:	4003d010 	.word	0x4003d010
     314:	4003d014 	.word	0x4003d014
     318:	4007d002 	.word	0x4007d002
     31c:	4007e000 	.word	0x4007e000
     320:	1fff0fe4 	.word	0x1fff0fe4
     324:	00002c18 	.word	0x00002c18
     328:	1fff06f8 	.word	0x1fff06f8
     32c:	1fff0fe4 	.word	0x1fff0fe4
     330:	1fff1468 	.word	0x1fff1468
     334:	1fff0200 	.word	0x1fff0200
     338:	00000000 	.word	0x00000000
     33c:	e000e400 	.word	0xe000e400
     340:	e000e456 	.word	0xe000e456
     344:	e000ed08 	.word	0xe000ed08
     348:	40065000 	.word	0x40065000
     34c:	40064000 	.word	0x40064000
     350:	40048044 	.word	0x40048044
     354:	40048004 	.word	0x40048004
     358:	000510c0 	.word	0x000510c0
     35c:	e000e014 	.word	0xe000e014
     360:	0001d4bf 	.word	0x0001d4bf
     364:	20200000 	.word	0x20200000
     368:	5edcd897 	.word	0x5edcd897
     36c:	4003e01c 	.word	0x4003e01c
     370:	5a94c3a5 	.word	0x5a94c3a5
     374:	4007f000 	.word	0x4007f000
     378:	ffffffff 	.word	0xffffffff
     37c:	ffffffff 	.word	0xffffffff
     380:	ffffffff 	.word	0xffffffff
     384:	ffffffff 	.word	0xffffffff
     388:	ffffffff 	.word	0xffffffff
     38c:	ffffffff 	.word	0xffffffff
     390:	ffffffff 	.word	0xffffffff
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff0fe4 	.word	0x1fff0fe4
     42c:	00000000 	.word	0x00000000
     430:	00002c1c 	.word	0x00002c1c

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff0fe8 	.word	0x1fff0fe8
     460:	00002c1c 	.word	0x00002c1c
     464:	1fff0fe4 	.word	0x1fff0fe4
     468:	00000000 	.word	0x00000000

0000046c <setup>:
#endif

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// General initialization, just sets all pins to input and starts serial communication.
void setup()
{
     46c:	b510      	push	{r4, lr}
  // for MODE_DETECT
#if defined(__arm__) && defined(CORE_TEENSY)
  for(int i = 33; i < 40; ++i)
     46e:	2421      	movs	r4, #33	; 0x21
    pinMode(i, INPUT_PULLUP);
     470:	b2e0      	uxtb	r0, r4
     472:	2102      	movs	r1, #2
// General initialization, just sets all pins to input and starts serial communication.
void setup()
{
  // for MODE_DETECT
#if defined(__arm__) && defined(CORE_TEENSY)
  for(int i = 33; i < 40; ++i)
     474:	3401      	adds	r4, #1
    pinMode(i, INPUT_PULLUP);
     476:	f000 f8cd 	bl	614 <pinMode>
// General initialization, just sets all pins to input and starts serial communication.
void setup()
{
  // for MODE_DETECT
#if defined(__arm__) && defined(CORE_TEENSY)
  for(int i = 33; i < 40; ++i)
     47a:	2c28      	cmp	r4, #40	; 0x28
     47c:	d1f8      	bne.n	470 <setup+0x4>
	KeyboardControllerSpy.setup(KeyboardControllerSpy::MODE_STAR_RAIDERS);
#elif defined(MODE_KEYBOARD_CONTROLLER_BIG_BIRD)
	KeyboardControllerSpy.setup(KeyboardControllerSpy::MODE_BIG_BIRD);
#endif

  T_DELAY(5000);
     47e:	f241 3088 	movw	r0, #5000	; 0x1388
  A_DELAY(200);

  Serial.begin( 115200 );
}
     482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	KeyboardControllerSpy.setup(KeyboardControllerSpy::MODE_STAR_RAIDERS);
#elif defined(MODE_KEYBOARD_CONTROLLER_BIG_BIRD)
	KeyboardControllerSpy.setup(KeyboardControllerSpy::MODE_BIG_BIRD);
#endif

  T_DELAY(5000);
     486:	f000 b8cb 	b.w	620 <delay>
     48a:	bf00      	nop

0000048c <loop>:
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Arduino sketch main loop definition.
void loop()
{
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
     490:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
     492:	f7ff ffeb 	bl	46c <setup>
	while (1) {
		loop();
     496:	f7ff fff9 	bl	48c <loop>
		yield();
     49a:	f001 f939 	bl	1710 <yield>
     49e:	e7fa      	b.n	496 <main+0x6>

000004a0 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
     4a0:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
     4a2:	4c10      	ldr	r4, [pc, #64]	; (4e4 <fault_isr+0x44>)
     4a4:	e008      	b.n	4b8 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
     4a6:	6823      	ldr	r3, [r4, #0]
     4a8:	0559      	lsls	r1, r3, #21
     4aa:	d40d      	bmi.n	4c8 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
     4ac:	6823      	ldr	r3, [r4, #0]
     4ae:	051a      	lsls	r2, r3, #20
     4b0:	d40f      	bmi.n	4d2 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
     4b2:	6823      	ldr	r3, [r4, #0]
     4b4:	04db      	lsls	r3, r3, #19
     4b6:	d411      	bmi.n	4dc <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
     4b8:	6823      	ldr	r3, [r4, #0]
     4ba:	0358      	lsls	r0, r3, #13
     4bc:	d5f3      	bpl.n	4a6 <fault_isr+0x6>
     4be:	f000 facd 	bl	a5c <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
     4c2:	6823      	ldr	r3, [r4, #0]
     4c4:	0559      	lsls	r1, r3, #21
     4c6:	d5f1      	bpl.n	4ac <fault_isr+0xc>
     4c8:	f000 f99c 	bl	804 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
     4cc:	6823      	ldr	r3, [r4, #0]
     4ce:	051a      	lsls	r2, r3, #20
     4d0:	d5ef      	bpl.n	4b2 <fault_isr+0x12>
     4d2:	f001 fb05 	bl	1ae0 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
     4d6:	6823      	ldr	r3, [r4, #0]
     4d8:	04db      	lsls	r3, r3, #19
     4da:	d5ed      	bpl.n	4b8 <fault_isr+0x18>
     4dc:	f001 fb96 	bl	1c0c <uart2_status_isr>
     4e0:	e7ea      	b.n	4b8 <fault_isr+0x18>
     4e2:	bf00      	nop
     4e4:	40048034 	.word	0x40048034

000004e8 <unused_isr>:
	}
}

void unused_isr(void)
{
     4e8:	b508      	push	{r3, lr}
	fault_isr();
     4ea:	f7ff ffd9 	bl	4a0 <fault_isr>
     4ee:	bf00      	nop

000004f0 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
     4f0:	4b01      	ldr	r3, [pc, #4]	; (4f8 <startup_early_hook+0x8>)
     4f2:	2210      	movs	r2, #16
     4f4:	801a      	strh	r2, [r3, #0]
     4f6:	4770      	bx	lr
     4f8:	40052000 	.word	0x40052000

000004fc <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
     4fc:	4770      	bx	lr
     4fe:	bf00      	nop

00000500 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
     500:	4909      	ldr	r1, [pc, #36]	; (528 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
     502:	b508      	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
     504:	680b      	ldr	r3, [r1, #0]
	if (incr != 0) {
     506:	b130      	cbz	r0, 516 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
     508:	466a      	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
     50a:	4418      	add	r0, r3
     50c:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
     510:	4290      	cmp	r0, r2
     512:	d202      	bcs.n	51a <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
     514:	6008      	str	r0, [r1, #0]
	}
	return prev;
     516:	4618      	mov	r0, r3
}
     518:	bd08      	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
     51a:	f001 fd95 	bl	2048 <__errno>
     51e:	230c      	movs	r3, #12
     520:	6003      	str	r3, [r0, #0]
			return (void *)-1;
     522:	f04f 30ff 	mov.w	r0, #4294967295
     526:	bd08      	pop	{r3, pc}
     528:	1fff06f8 	.word	0x1fff06f8

0000052c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
     52c:	b4f0      	push	{r4, r5, r6, r7}
     52e:	1e4d      	subs	r5, r1, #1
     530:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
     532:	2400      	movs	r4, #0
     534:	e000      	b.n	538 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
     536:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
     538:	fbb0 f3f2 	udiv	r3, r0, r2
     53c:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
     540:	2809      	cmp	r0, #9
     542:	f100 0730 	add.w	r7, r0, #48	; 0x30
     546:	bf8a      	itet	hi
     548:	3037      	addhi	r0, #55	; 0x37
     54a:	b2f8      	uxtbls	r0, r7
     54c:	b2c0      	uxtbhi	r0, r0
     54e:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
     552:	4618      	mov	r0, r3
     554:	2b00      	cmp	r3, #0
     556:	d1ee      	bne.n	536 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
     558:	190a      	adds	r2, r1, r4
     55a:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
     55c:	b14c      	cbz	r4, 572 <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
     55e:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
     560:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
     564:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
     566:	3301      	adds	r3, #1
     568:	1ae0      	subs	r0, r4, r3
     56a:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
     56c:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
     570:	dbf5      	blt.n	55e <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
     572:	4608      	mov	r0, r1
     574:	bcf0      	pop	{r4, r5, r6, r7}
     576:	4770      	bx	lr

00000578 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
     578:	4a1c      	ldr	r2, [pc, #112]	; (5ec <pinMode.part.2+0x74>)
     57a:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     57e:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
     580:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     582:	d011      	beq.n	5a8 <pinMode.part.2+0x30>
     584:	2904      	cmp	r1, #4
     586:	d01b      	beq.n	5c0 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
     588:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
     58c:	2200      	movs	r2, #0
     58e:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
     592:	b129      	cbz	r1, 5a0 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
     594:	2902      	cmp	r1, #2
     596:	d020      	beq.n	5da <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
     598:	2903      	cmp	r1, #3
     59a:	d022      	beq.n	5e2 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
     59c:	601a      	str	r2, [r3, #0]
     59e:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
     5a0:	f44f 7280 	mov.w	r2, #256	; 0x100
     5a4:	601a      	str	r2, [r3, #0]
     5a6:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
     5a8:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
     5ac:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
     5b0:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
     5b4:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
     5b6:	681a      	ldr	r2, [r3, #0]
     5b8:	f022 0220 	bic.w	r2, r2, #32
     5bc:	601a      	str	r2, [r3, #0]
     5be:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
     5c0:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
     5c4:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
     5c8:	2001      	movs	r0, #1
     5ca:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
     5ce:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
     5d0:	681a      	ldr	r2, [r3, #0]
     5d2:	f042 0220 	orr.w	r2, r2, #32
     5d6:	601a      	str	r2, [r3, #0]
     5d8:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
     5da:	f240 1203 	movw	r2, #259	; 0x103
     5de:	601a      	str	r2, [r3, #0]
     5e0:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
     5e2:	f44f 7281 	mov.w	r2, #258	; 0x102
     5e6:	601a      	str	r2, [r3, #0]
     5e8:	4770      	bx	lr
     5ea:	bf00      	nop
     5ec:	000029a8 	.word	0x000029a8

000005f0 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
     5f0:	b430      	push	{r4, r5}
	RTC_SR = 0;
     5f2:	4b05      	ldr	r3, [pc, #20]	; (608 <rtc_set+0x18>)
	RTC_TPR = 0;
     5f4:	4d05      	ldr	r5, [pc, #20]	; (60c <rtc_set+0x1c>)
	RTC_TSR = t;
     5f6:	4c06      	ldr	r4, [pc, #24]	; (610 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
     5f8:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
     5fa:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
     5fc:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
     5fe:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
     600:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
     602:	6019      	str	r1, [r3, #0]
}
     604:	bc30      	pop	{r4, r5}
     606:	4770      	bx	lr
     608:	4003d014 	.word	0x4003d014
     60c:	4003d004 	.word	0x4003d004
     610:	4003d000 	.word	0x4003d000

00000614 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
     614:	283f      	cmp	r0, #63	; 0x3f
     616:	d801      	bhi.n	61c <pinMode+0x8>
     618:	f7ff bfae 	b.w	578 <pinMode.part.2>
     61c:	4770      	bx	lr
     61e:	bf00      	nop

00000620 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
     620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     624:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
     626:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
     628:	4f20      	ldr	r7, [pc, #128]	; (6ac <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
     62a:	4b21      	ldr	r3, [pc, #132]	; (6b0 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
     62c:	4a21      	ldr	r2, [pc, #132]	; (6b4 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
     62e:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
     630:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
     632:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
     634:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
     636:	0152      	lsls	r2, r2, #5
     638:	d502      	bpl.n	640 <delay+0x20>
     63a:	2b32      	cmp	r3, #50	; 0x32
     63c:	bf88      	it	hi
     63e:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
     640:	b395      	cbz	r5, 6a8 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
     642:	f5c3 33ea 	rsb	r3, r3, #119808	; 0x1d400
     646:	4e1c      	ldr	r6, [pc, #112]	; (6b8 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
     648:	f8df 9064 	ldr.w	r9, [pc, #100]	; 6b0 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
     64c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 6b4 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
     650:	33bf      	adds	r3, #191	; 0xbf
     652:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     656:	fba6 1303 	umull	r1, r3, r6, r3
     65a:	fb02 f404 	mul.w	r4, r2, r4
     65e:	eb04 1493 	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
     662:	b672      	cpsid	i
	current = SYST_CVR;
     664:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
     668:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
     66a:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
     66e:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
     670:	f5c1 33ea 	rsb	r3, r1, #119808	; 0x1d400
     674:	33bf      	adds	r3, #191	; 0xbf
     676:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
     67a:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
     67e:	ebc4 1393 	rsb	r3, r4, r3, lsr #6
     682:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
     686:	d002      	beq.n	68e <delay+0x6e>
     688:	2932      	cmp	r1, #50	; 0x32
     68a:	bf88      	it	hi
     68c:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
     68e:	fb00 3302 	mla	r3, r0, r2, r3
     692:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     696:	d304      	bcc.n	6a2 <delay+0x82>
				ms--;
				if (ms == 0) return;
     698:	3d01      	subs	r5, #1
     69a:	d005      	beq.n	6a8 <delay+0x88>
				start += 1000;
     69c:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
     6a0:	e7df      	b.n	662 <delay+0x42>
			}
			yield();
     6a2:	f001 f835 	bl	1710 <yield>
		}
     6a6:	e7dc      	b.n	662 <delay+0x42>
     6a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     6ac:	1fff1000 	.word	0x1fff1000
     6b0:	e000e018 	.word	0xe000e018
     6b4:	e000ed04 	.word	0xe000ed04
     6b8:	88888889 	.word	0x88888889

000006bc <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
     6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
     6be:	4b3e      	ldr	r3, [pc, #248]	; (7b8 <_init_Teensyduino_internal_+0xfc>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
     6c0:	493e      	ldr	r1, [pc, #248]	; (7bc <_init_Teensyduino_internal_+0x100>)
	FTM0_MOD = DEFAULT_FTM_MOD;
     6c2:	f8df c118 	ldr.w	ip, [pc, #280]	; 7dc <_init_Teensyduino_internal_+0x120>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
     6c6:	4e3e      	ldr	r6, [pc, #248]	; (7c0 <_init_Teensyduino_internal_+0x104>)
	FTM0_C2SC = 0x28;
     6c8:	4a3e      	ldr	r2, [pc, #248]	; (7c4 <_init_Teensyduino_internal_+0x108>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
     6ca:	f8df e114 	ldr.w	lr, [pc, #276]	; 7e0 <_init_Teensyduino_internal_+0x124>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
     6ce:	4d3e      	ldr	r5, [pc, #248]	; (7c8 <_init_Teensyduino_internal_+0x10c>)
	FTM0_C4SC = 0x28;
     6d0:	4c3e      	ldr	r4, [pc, #248]	; (7cc <_init_Teensyduino_internal_+0x110>)
	FTM0_C5SC = 0x28;
     6d2:	4f3f      	ldr	r7, [pc, #252]	; (7d0 <_init_Teensyduino_internal_+0x114>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
     6d4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
     6d8:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
     6da:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     6de:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
     6e0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
     6e4:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
     6e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     6ea:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
     6ec:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
     6f0:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
     6f2:	2000      	movs	r0, #0
     6f4:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
     6f6:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
     6f8:	f64e 71ff 	movw	r1, #61439	; 0xefff
     6fc:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
     700:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
     704:	6033      	str	r3, [r6, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
     706:	f50e 2e01 	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
     70a:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
     70c:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
     70e:	6023      	str	r3, [r4, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
     710:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
     714:	603b      	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
     716:	f504 2400 	add.w	r4, r4, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
     71a:	62b3      	str	r3, [r6, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
     71c:	f507 2700 	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
     720:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
     722:	f506 2601 	add.w	r6, r6, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
     726:	f502 2201 	add.w	r2, r2, #528384	; 0x81000
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
     72a:	f10e 0e10 	add.w	lr, lr, #16
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
     72e:	f605 75e8 	addw	r5, r5, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
     732:	f604 74e8 	addw	r4, r4, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
     736:	f507 677f 	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
     73a:	3210      	adds	r2, #16
	FTM3_C5SC = 0x28;
     73c:	3620      	adds	r6, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
     73e:	602b      	str	r3, [r5, #0]
	FTM3_C1SC = 0x28;
     740:	6023      	str	r3, [r4, #0]
	FTM3_C2SC = 0x28;
     742:	f8ce 3000 	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
     746:	603b      	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
     748:	6013      	str	r3, [r2, #0]
	FTM3_C5SC = 0x28;
     74a:	6033      	str	r3, [r6, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
     74c:	4e21      	ldr	r6, [pc, #132]	; (7d4 <_init_Teensyduino_internal_+0x118>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
     74e:	61bb      	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
     750:	6193      	str	r3, [r2, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
     752:	2209      	movs	r2, #9
     754:	6032      	str	r2, [r6, #0]
	FTM1_CNT = 0;
     756:	f5a7 2700 	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
     75a:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
     75e:	3f20      	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
     760:	3608      	adds	r6, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
     762:	6038      	str	r0, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
     764:	6031      	str	r1, [r6, #0]
	FTM1_C0SC = 0x28;
     766:	60bb      	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
     768:	60f3      	str	r3, [r6, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
     76a:	f847 2c04 	str.w	r2, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
     76e:	f506 26fd 	add.w	r6, r6, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
     772:	f507 27fe 	add.w	r7, r7, #520192	; 0x7f000
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
     776:	f206 76fc 	addw	r6, r6, #2044	; 0x7fc
	FTM2_MOD = DEFAULT_FTM_MOD;
     77a:	3704      	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
     77c:	6030      	str	r0, [r6, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
     77e:	6039      	str	r1, [r7, #0]
	FTM2_C0SC = 0x28;
     780:	60b3      	str	r3, [r6, #8]
	FTM2_C1SC = 0x28;
     782:	60fb      	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
     784:	f846 2c04 	str.w	r2, [r6, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
     788:	3608      	adds	r6, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
     78a:	f8c7 0ffc 	str.w	r0, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
     78e:	f606 76fc 	addw	r6, r6, #4092	; 0xffc
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
     792:	4811      	ldr	r0, [pc, #68]	; (7d8 <_init_Teensyduino_internal_+0x11c>)
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
     794:	6031      	str	r1, [r6, #0]
	FTM3_C0SC = 0x28;
     796:	602b      	str	r3, [r5, #0]
	FTM3_C1SC = 0x28;
     798:	6023      	str	r3, [r4, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
     79a:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
     79c:	f001 f920 	bl	19e0 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
     7a0:	2019      	movs	r0, #25
     7a2:	f7ff ff3d 	bl	620 <delay>
	usb_init();
     7a6:	f000 febf 	bl	1528 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
     7aa:	f240 1013 	movw	r0, #275	; 0x113
}
     7ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
     7b2:	f7ff bf35 	b.w	620 <delay>
     7b6:	bf00      	nop
     7b8:	e000e104 	.word	0xe000e104
     7bc:	40038004 	.word	0x40038004
     7c0:	40038014 	.word	0x40038014
     7c4:	4003801c 	.word	0x4003801c
     7c8:	40038024 	.word	0x40038024
     7cc:	4003802c 	.word	0x4003802c
     7d0:	40038034 	.word	0x40038034
     7d4:	40038000 	.word	0x40038000
     7d8:	400b9000 	.word	0x400b9000
     7dc:	40038008 	.word	0x40038008
     7e0:	4003800c 	.word	0x4003800c

000007e4 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
     7e4:	4a05      	ldr	r2, [pc, #20]	; (7fc <serial_available+0x18>)
	tail = rx_buffer_tail;
     7e6:	4b06      	ldr	r3, [pc, #24]	; (800 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
     7e8:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
     7ea:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
     7ec:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
     7ee:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
     7f0:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
     7f2:	bf38      	it	cc
     7f4:	3040      	addcc	r0, #64	; 0x40
     7f6:	1ac0      	subs	r0, r0, r3
}
     7f8:	4770      	bx	lr
     7fa:	bf00      	nop
     7fc:	1fff1008 	.word	0x1fff1008
     800:	1fff1009 	.word	0x1fff1009

00000804 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
     804:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
     806:	4b38      	ldr	r3, [pc, #224]	; (8e8 <uart0_status_isr+0xe4>)
     808:	791a      	ldrb	r2, [r3, #4]
     80a:	f012 0f30 	tst.w	r2, #48	; 0x30
     80e:	d02c      	beq.n	86a <uart0_status_isr+0x66>
		__disable_irq();
     810:	b672      	cpsid	i
		avail = UART0_RCFIFO;
     812:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
     814:	f001 02ff 	and.w	r2, r1, #255	; 0xff
     818:	2900      	cmp	r1, #0
     81a:	d03d      	beq.n	898 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
     81c:	b662      	cpsie	i
			head = rx_buffer_head;
     81e:	4f33      	ldr	r7, [pc, #204]	; (8ec <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
     820:	4933      	ldr	r1, [pc, #204]	; (8f0 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
     822:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
     824:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
     826:	4e33      	ldr	r6, [pc, #204]	; (8f4 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
     828:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
     82a:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
     82c:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
     82e:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
     830:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
     832:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
     834:	bf28      	it	cs
     836:	2300      	movcs	r3, #0
				if (newhead != tail) {
     838:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
     83a:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
     83e:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
     840:	bf1c      	itt	ne
     842:	54f1      	strbne	r1, [r6, r3]
     844:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
     846:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
     84a:	d1f0      	bne.n	82e <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
     84c:	4b2a      	ldr	r3, [pc, #168]	; (8f8 <uart0_status_isr+0xf4>)
     84e:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
     850:	b2c2      	uxtb	r2, r0
     852:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
     854:	b14b      	cbz	r3, 86a <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
     856:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
     858:	bf36      	itet	cc
     85a:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
     85e:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
     860:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
     862:	2827      	cmp	r0, #39	; 0x27
     864:	bfc4      	itt	gt
     866:	2201      	movgt	r2, #1
     868:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
     86a:	491f      	ldr	r1, [pc, #124]	; (8e8 <uart0_status_isr+0xe4>)
     86c:	78ca      	ldrb	r2, [r1, #3]
     86e:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
     870:	0615      	lsls	r5, r2, #24
     872:	d416      	bmi.n	8a2 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
     874:	0652      	lsls	r2, r2, #25
     876:	d50d      	bpl.n	894 <uart0_status_isr+0x90>
     878:	4b1b      	ldr	r3, [pc, #108]	; (8e8 <uart0_status_isr+0xe4>)
     87a:	791b      	ldrb	r3, [r3, #4]
     87c:	065b      	lsls	r3, r3, #25
     87e:	d509      	bpl.n	894 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
     880:	4b1e      	ldr	r3, [pc, #120]	; (8fc <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
     882:	491f      	ldr	r1, [pc, #124]	; (900 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
     884:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
     886:	2200      	movs	r2, #0
     888:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
     88a:	b103      	cbz	r3, 88e <uart0_status_isr+0x8a>
     88c:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
     88e:	4b16      	ldr	r3, [pc, #88]	; (8e8 <uart0_status_isr+0xe4>)
     890:	223c      	movs	r2, #60	; 0x3c
     892:	70da      	strb	r2, [r3, #3]
	}
}
     894:	bcf0      	pop	{r4, r5, r6, r7}
     896:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
     898:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
     89a:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
     89c:	745a      	strb	r2, [r3, #17]
			__enable_irq();
     89e:	b662      	cpsie	i
     8a0:	e7e3      	b.n	86a <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
     8a2:	790b      	ldrb	r3, [r1, #4]
     8a4:	061c      	lsls	r4, r3, #24
     8a6:	d5e5      	bpl.n	874 <uart0_status_isr+0x70>
		head = tx_buffer_head;
     8a8:	4b16      	ldr	r3, [pc, #88]	; (904 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
     8aa:	4e17      	ldr	r6, [pc, #92]	; (908 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
     8ac:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
     8ae:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
     8b0:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
     8b2:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
     8b4:	429c      	cmp	r4, r3
     8b6:	d00e      	beq.n	8d6 <uart0_status_isr+0xd2>
     8b8:	4d14      	ldr	r5, [pc, #80]	; (90c <uart0_status_isr+0x108>)
     8ba:	e001      	b.n	8c0 <uart0_status_isr+0xbc>
     8bc:	42a3      	cmp	r3, r4
     8be:	d00a      	beq.n	8d6 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
     8c0:	3301      	adds	r3, #1
     8c2:	2b40      	cmp	r3, #64	; 0x40
     8c4:	bf28      	it	cs
     8c6:	2300      	movcs	r3, #0
			avail = UART0_S1;
     8c8:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
     8ca:	5ce8      	ldrb	r0, [r5, r3]
     8cc:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
     8ce:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
     8d0:	7d08      	ldrb	r0, [r1, #20]
     8d2:	2807      	cmp	r0, #7
     8d4:	d9f2      	bls.n	8bc <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
     8d6:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
     8d8:	4903      	ldr	r1, [pc, #12]	; (8e8 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
     8da:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
     8dc:	790b      	ldrb	r3, [r1, #4]
     8de:	0618      	lsls	r0, r3, #24
     8e0:	bf44      	itt	mi
     8e2:	237c      	movmi	r3, #124	; 0x7c
     8e4:	70cb      	strbmi	r3, [r1, #3]
     8e6:	e7c5      	b.n	874 <uart0_status_isr+0x70>
     8e8:	4006a000 	.word	0x4006a000
     8ec:	1fff1008 	.word	0x1fff1008
     8f0:	1fff1009 	.word	0x1fff1009
     8f4:	1fff104c 	.word	0x1fff104c
     8f8:	1fff1004 	.word	0x1fff1004
     8fc:	1fff1090 	.word	0x1fff1090
     900:	1fff108c 	.word	0x1fff108c
     904:	1fff1094 	.word	0x1fff1094
     908:	1fff108d 	.word	0x1fff108d
     90c:	1fff100c 	.word	0x1fff100c

00000910 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
     910:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
     912:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
     914:	4a2b      	ldr	r2, [pc, #172]	; (9c4 <usb_rx_memory+0xb4>)
     916:	7813      	ldrb	r3, [r2, #0]
     918:	071d      	lsls	r5, r3, #28
     91a:	d506      	bpl.n	92a <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
     91c:	4b2a      	ldr	r3, [pc, #168]	; (9c8 <usb_rx_memory+0xb8>)
     91e:	6a19      	ldr	r1, [r3, #32]
     920:	2900      	cmp	r1, #0
     922:	d036      	beq.n	992 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
     924:	6a99      	ldr	r1, [r3, #40]	; 0x28
     926:	2900      	cmp	r1, #0
     928:	d041      	beq.n	9ae <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
     92a:	7853      	ldrb	r3, [r2, #1]
     92c:	071c      	lsls	r4, r3, #28
     92e:	d506      	bpl.n	93e <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
     930:	4b25      	ldr	r3, [pc, #148]	; (9c8 <usb_rx_memory+0xb8>)
     932:	6c19      	ldr	r1, [r3, #64]	; 0x40
     934:	2900      	cmp	r1, #0
     936:	d03e      	beq.n	9b6 <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
     938:	6c99      	ldr	r1, [r3, #72]	; 0x48
     93a:	2900      	cmp	r1, #0
     93c:	d039      	beq.n	9b2 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
     93e:	7893      	ldrb	r3, [r2, #2]
     940:	0719      	lsls	r1, r3, #28
     942:	d505      	bpl.n	950 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
     944:	4b20      	ldr	r3, [pc, #128]	; (9c8 <usb_rx_memory+0xb8>)
     946:	6e19      	ldr	r1, [r3, #96]	; 0x60
     948:	2900      	cmp	r1, #0
     94a:	d036      	beq.n	9ba <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
     94c:	6e99      	ldr	r1, [r3, #104]	; 0x68
     94e:	b189      	cbz	r1, 974 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
     950:	78d3      	ldrb	r3, [r2, #3]
     952:	071b      	lsls	r3, r3, #28
     954:	d507      	bpl.n	966 <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
     956:	4b1c      	ldr	r3, [pc, #112]	; (9c8 <usb_rx_memory+0xb8>)
     958:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
     95c:	b37a      	cbz	r2, 9be <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
     95e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     962:	2111      	movs	r1, #17
     964:	b13a      	cbz	r2, 976 <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
     966:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
     968:	4b18      	ldr	r3, [pc, #96]	; (9cc <usb_rx_memory+0xbc>)
     96a:	2200      	movs	r2, #0
     96c:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
     96e:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
     970:	f000 be76 	b.w	1660 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
     974:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
     976:	4c15      	ldr	r4, [pc, #84]	; (9cc <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
     978:	4d15      	ldr	r5, [pc, #84]	; (9d0 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
     97a:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
     97c:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
     980:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     984:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
     986:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
     988:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
     98a:	7022      	strb	r2, [r4, #0]
				__enable_irq();
     98c:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
     98e:	bc30      	pop	{r4, r5}
     990:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
     992:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
     994:	4c0d      	ldr	r4, [pc, #52]	; (9cc <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
     996:	4d0f      	ldr	r5, [pc, #60]	; (9d4 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
     998:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
     99a:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
     99e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     9a2:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
     9a4:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
     9a6:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
     9a8:	7022      	strb	r2, [r4, #0]
				__enable_irq();
     9aa:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
     9ac:	e7ef      	b.n	98e <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
     9ae:	2105      	movs	r1, #5
     9b0:	e7e1      	b.n	976 <usb_rx_memory+0x66>
     9b2:	2109      	movs	r1, #9
     9b4:	e7df      	b.n	976 <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
     9b6:	2208      	movs	r2, #8
     9b8:	e7ec      	b.n	994 <usb_rx_memory+0x84>
     9ba:	220c      	movs	r2, #12
     9bc:	e7ea      	b.n	994 <usb_rx_memory+0x84>
     9be:	2210      	movs	r2, #16
     9c0:	e7e8      	b.n	994 <usb_rx_memory+0x84>
     9c2:	bf00      	nop
     9c4:	00002ba8 	.word	0x00002ba8
     9c8:	1fff0000 	.word	0x1fff0000
     9cc:	1fff116d 	.word	0x1fff116d
     9d0:	004000c8 	.word	0x004000c8
     9d4:	00400088 	.word	0x00400088

000009d8 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
     9d8:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
     9da:	2b03      	cmp	r3, #3
     9dc:	d81d      	bhi.n	a1a <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
     9de:	4a1b      	ldr	r2, [pc, #108]	; (a4c <usb_tx+0x74>)
     9e0:	0140      	lsls	r0, r0, #5
     9e2:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
     9e6:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
     9e8:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
     9ea:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
     9ec:	4c18      	ldr	r4, [pc, #96]	; (a50 <usb_tx+0x78>)
     9ee:	5ce2      	ldrb	r2, [r4, r3]
     9f0:	2a03      	cmp	r2, #3
     9f2:	d81b      	bhi.n	a2c <usb_tx+0x54>
     9f4:	e8df f002 	tbb	[pc, r2]
     9f8:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
     9fc:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
     9fe:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
     a00:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
     a02:	f010 0f08 	tst.w	r0, #8
     a06:	bf14      	ite	ne
     a08:	23c8      	movne	r3, #200	; 0xc8
     a0a:	2388      	moveq	r3, #136	; 0x88
     a0c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
     a10:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
     a12:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
     a14:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
     a16:	b662      	cpsie	i
}
     a18:	bc30      	pop	{r4, r5}
     a1a:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
     a1c:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
     a1e:	2202      	movs	r2, #2
		break;
     a20:	e7ed      	b.n	9fe <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
     a22:	2205      	movs	r2, #5
     a24:	e7eb      	b.n	9fe <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
     a26:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
     a28:	2204      	movs	r2, #4
		break;
     a2a:	e7e8      	b.n	9fe <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
     a2c:	4a09      	ldr	r2, [pc, #36]	; (a54 <usb_tx+0x7c>)
     a2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     a32:	b138      	cbz	r0, a44 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
     a34:	4a08      	ldr	r2, [pc, #32]	; (a58 <usb_tx+0x80>)
     a36:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     a3a:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
     a3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
     a40:	b662      	cpsie	i
		return;
     a42:	e7e9      	b.n	a18 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
     a44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
     a48:	4a03      	ldr	r2, [pc, #12]	; (a58 <usb_tx+0x80>)
     a4a:	e7f7      	b.n	a3c <usb_tx+0x64>
     a4c:	1fff0000 	.word	0x1fff0000
     a50:	1fff117c 	.word	0x1fff117c
     a54:	1fff1144 	.word	0x1fff1144
     a58:	1fff1154 	.word	0x1fff1154

00000a5c <usb_isr>:
}



void usb_isr(void)
{
     a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
     a60:	f8df b318 	ldr.w	fp, [pc, #792]	; d7c <usb_isr+0x320>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
     a64:	f8df a318 	ldr.w	sl, [pc, #792]	; d80 <usb_isr+0x324>
}



void usb_isr(void)
{
     a68:	b087      	sub	sp, #28
     a6a:	e044      	b.n	af6 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
     a6c:	4fae      	ldr	r7, [pc, #696]	; (d28 <usb_isr+0x2cc>)
     a6e:	ea4f 0893 	mov.w	r8, r3, lsr #2
     a72:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
     a76:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
     a78:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
     a7c:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
     a80:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
     a82:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
     a86:	f003 04ff 	and.w	r4, r3, #255	; 0xff
     a8a:	2b00      	cmp	r3, #0
     a8c:	f040 8104 	bne.w	c98 <usb_isr+0x23c>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
     a90:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
     a94:	0c1b      	lsrs	r3, r3, #16
     a96:	b299      	uxth	r1, r3
     a98:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
     a9c:	2b00      	cmp	r3, #0
     a9e:	f000 80f2 	beq.w	c86 <usb_isr+0x22a>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
     aa2:	4ba2      	ldr	r3, [pc, #648]	; (d2c <usb_isr+0x2d0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
     aa4:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
     aa8:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
     aac:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
     ab0:	2a00      	cmp	r2, #0
     ab2:	f000 816e 	beq.w	d92 <usb_isr+0x336>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
     ab6:	4d9e      	ldr	r5, [pc, #632]	; (d30 <usb_isr+0x2d4>)
     ab8:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
     abc:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
     abe:	4c9d      	ldr	r4, [pc, #628]	; (d34 <usb_isr+0x2d8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
     ac0:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
     ac4:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
     ac8:	4419      	add	r1, r3
     aca:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
     ace:	f000 fda7 	bl	1620 <usb_malloc>
					if (packet) {
     ad2:	2800      	cmp	r0, #0
     ad4:	f000 8156 	beq.w	d84 <usb_isr+0x328>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
     ad8:	4a97      	ldr	r2, [pc, #604]	; (d38 <usb_isr+0x2dc>)
     ada:	4b98      	ldr	r3, [pc, #608]	; (d3c <usb_isr+0x2e0>)
     adc:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
     ae0:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
     ae4:	bf18      	it	ne
     ae6:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
     ae8:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
     aec:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
     af0:	2308      	movs	r3, #8
     af2:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
     af6:	f89b 4000 	ldrb.w	r4, [fp]
     afa:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
     afc:	0761      	lsls	r1, r4, #29
     afe:	d51b      	bpl.n	b38 <usb_isr+0xdc>
		if (usb_configuration) {
     b00:	4b8f      	ldr	r3, [pc, #572]	; (d40 <usb_isr+0x2e4>)
     b02:	781b      	ldrb	r3, [r3, #0]
     b04:	b1ab      	cbz	r3, b32 <usb_isr+0xd6>
			t = usb_reboot_timer;
     b06:	498f      	ldr	r1, [pc, #572]	; (d44 <usb_isr+0x2e8>)
     b08:	780a      	ldrb	r2, [r1, #0]
			if (t) {
     b0a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
     b0e:	b12a      	cbz	r2, b1c <usb_isr+0xc0>
				usb_reboot_timer = --t;
     b10:	3b01      	subs	r3, #1
     b12:	b2db      	uxtb	r3, r3
     b14:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
     b16:	2b00      	cmp	r3, #0
     b18:	f000 84ef 	beq.w	14fa <usb_isr+0xa9e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
     b1c:	498a      	ldr	r1, [pc, #552]	; (d48 <usb_isr+0x2ec>)
     b1e:	780a      	ldrb	r2, [r1, #0]
			if (t) {
     b20:	f002 03ff 	and.w	r3, r2, #255	; 0xff
     b24:	b12a      	cbz	r2, b32 <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
     b26:	3b01      	subs	r3, #1
     b28:	b2db      	uxtb	r3, r3
     b2a:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
     b2c:	2b00      	cmp	r3, #0
     b2e:	f000 80f7 	beq.w	d20 <usb_isr+0x2c4>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
     b32:	2304      	movs	r3, #4
     b34:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
     b38:	f004 0308 	and.w	r3, r4, #8
     b3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
     b40:	2b00      	cmp	r3, #0
     b42:	f000 80d6 	beq.w	cf2 <usb_isr+0x296>
		uint8_t endpoint;
		stat = USB0_STAT;
     b46:	f89a 3000 	ldrb.w	r3, [sl]
     b4a:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
     b4c:	091e      	lsrs	r6, r3, #4
     b4e:	d18d      	bne.n	a6c <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
     b50:	089c      	lsrs	r4, r3, #2
     b52:	f8df 91d4 	ldr.w	r9, [pc, #468]	; d28 <usb_isr+0x2cc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
     b56:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
     b5a:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
     b5e:	f3c2 0283 	ubfx	r2, r2, #2, #4
     b62:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
     b64:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
     b66:	2a0c      	cmp	r2, #12
     b68:	d87e      	bhi.n	c68 <usb_isr+0x20c>
     b6a:	e8df f002 	tbb	[pc, r2]
     b6e:	8181      	.short	0x8181
     b70:	7d7d7d7d 	.word	0x7d7d7d7d
     b74:	7d477d7d 	.word	0x7d477d7d
     b78:	7d7d      	.short	0x7d7d
     b7a:	07          	.byte	0x07
     b7b:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
     b7c:	6808      	ldr	r0, [r1, #0]
     b7e:	4d73      	ldr	r5, [pc, #460]	; (d4c <usb_isr+0x2f0>)
		setup.word2 = *(uint32_t *)(buf + 4);
     b80:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
     b82:	4f73      	ldr	r7, [pc, #460]	; (d50 <usb_isr+0x2f4>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
     b84:	4e73      	ldr	r6, [pc, #460]	; (d54 <usb_isr+0x2f8>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
     b86:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
     b88:	b281      	uxth	r1, r0
     b8a:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
     b8e:	4b6a      	ldr	r3, [pc, #424]	; (d38 <usb_isr+0x2dc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
     b90:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
     b92:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
     b96:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
     b98:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
     b9a:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
     b9e:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
     ba0:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
     ba4:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
     ba8:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
     bac:	4c5e      	ldr	r4, [pc, #376]	; (d28 <usb_isr+0x2cc>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
     bae:	f200 80f4 	bhi.w	d9a <usb_isr+0x33e>
     bb2:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
     bb6:	f080 8378 	bcs.w	12aa <usb_isr+0x84e>
     bba:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
     bbe:	f000 8362 	beq.w	1286 <usb_isr+0x82a>
     bc2:	f200 8287 	bhi.w	10d4 <usb_isr+0x678>
     bc6:	2980      	cmp	r1, #128	; 0x80
     bc8:	f000 82ec 	beq.w	11a4 <usb_isr+0x748>
     bcc:	2982      	cmp	r1, #130	; 0x82
     bce:	f040 831e 	bne.w	120e <usb_isr+0x7b2>
     bd2:	88a9      	ldrh	r1, [r5, #4]
     bd4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
     bd8:	2904      	cmp	r1, #4
     bda:	f200 8318 	bhi.w	120e <usb_isr+0x7b2>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
     bde:	485e      	ldr	r0, [pc, #376]	; (d58 <usb_isr+0x2fc>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
     be0:	4c5e      	ldr	r4, [pc, #376]	; (d5c <usb_isr+0x300>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
     be2:	0089      	lsls	r1, r1, #2
     be4:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
     be6:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
     be8:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
     bea:	7802      	ldrb	r2, [r0, #0]
     bec:	0793      	lsls	r3, r2, #30
     bee:	f140 8379 	bpl.w	12e4 <usb_isr+0x888>
     bf2:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
     bf6:	f04f 0e02 	mov.w	lr, #2
     bfa:	e2d8      	b.n	11ae <usb_isr+0x752>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
     bfc:	4f54      	ldr	r7, [pc, #336]	; (d50 <usb_isr+0x2f4>)
     bfe:	683a      	ldr	r2, [r7, #0]
		if (data) {
     c00:	b342      	cbz	r2, c54 <usb_isr+0x1f8>
			size = ep0_tx_len;
     c02:	4b57      	ldr	r3, [pc, #348]	; (d60 <usb_isr+0x304>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     c04:	4e53      	ldr	r6, [pc, #332]	; (d54 <usb_isr+0x2f8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
     c06:	4957      	ldr	r1, [pc, #348]	; (d64 <usb_isr+0x308>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
     c08:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     c0a:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
     c0c:	780d      	ldrb	r5, [r1, #0]
     c0e:	2840      	cmp	r0, #64	; 0x40
     c10:	4686      	mov	lr, r0
     c12:	f045 0802 	orr.w	r8, r5, #2
     c16:	bf28      	it	cs
     c18:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     c1c:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
     c1e:	f084 0401 	eor.w	r4, r4, #1
     c22:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
     c24:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     c28:	bf0c      	ite	eq
     c2a:	2488      	moveq	r4, #136	; 0x88
     c2c:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
     c2e:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
     c32:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
     c34:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     c38:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
     c3c:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
     c3e:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     c40:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
     c44:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
     c46:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
     c48:	b918      	cbnz	r0, c52 <usb_isr+0x1f6>
     c4a:	f1be 0f40 	cmp.w	lr, #64	; 0x40
     c4e:	bf18      	it	ne
     c50:	2200      	movne	r2, #0
     c52:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
     c54:	4b3d      	ldr	r3, [pc, #244]	; (d4c <usb_isr+0x2f0>)
     c56:	881a      	ldrh	r2, [r3, #0]
     c58:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
     c5c:	d104      	bne.n	c68 <usb_isr+0x20c>
			setup.bRequest = 0;
     c5e:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
     c60:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
     c62:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
     c64:	4b40      	ldr	r3, [pc, #256]	; (d68 <usb_isr+0x30c>)
     c66:	701a      	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
     c68:	4a40      	ldr	r2, [pc, #256]	; (d6c <usb_isr+0x310>)
     c6a:	2301      	movs	r3, #1
     c6c:	7013      	strb	r3, [r2, #0]
     c6e:	e73f      	b.n	af0 <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
     c70:	4a36      	ldr	r2, [pc, #216]	; (d4c <usb_isr+0x2f0>)
     c72:	8815      	ldrh	r5, [r2, #0]
     c74:	f242 0021 	movw	r0, #8225	; 0x2021
     c78:	4285      	cmp	r5, r0
     c7a:	f000 81ff 	beq.w	107c <usb_isr+0x620>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
     c7e:	4a2e      	ldr	r2, [pc, #184]	; (d38 <usb_isr+0x2dc>)
     c80:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
     c84:	e7f0      	b.n	c68 <usb_isr+0x20c>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
     c86:	4a2c      	ldr	r2, [pc, #176]	; (d38 <usb_isr+0x2dc>)
     c88:	4b2c      	ldr	r3, [pc, #176]	; (d3c <usb_isr+0x2e0>)
     c8a:	f019 0f08 	tst.w	r9, #8
     c8e:	bf18      	it	ne
     c90:	4613      	movne	r3, r2
     c92:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
     c96:	e72b      	b.n	af0 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
     c98:	f000 fce2 	bl	1660 <usb_free>
				packet = tx_first[endpoint];
     c9c:	4a34      	ldr	r2, [pc, #208]	; (d70 <usb_isr+0x314>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
     c9e:	4935      	ldr	r1, [pc, #212]	; (d74 <usb_isr+0x318>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
     ca0:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
     ca4:	2b00      	cmp	r3, #0
     ca6:	f000 81b6 	beq.w	1016 <usb_isr+0x5ba>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
     caa:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
     cac:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
     cae:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
     cb2:	f103 0208 	add.w	r2, r3, #8
     cb6:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
     cba:	2c03      	cmp	r4, #3
     cbc:	d805      	bhi.n	cca <usb_isr+0x26e>
     cbe:	e8df f004 	tbb	[pc, r4]
     cc2:	0f12      	.short	0x0f12
     cc4:	0215      	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
     cc6:	2204      	movs	r2, #4
     cc8:	558a      	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
     cca:	881a      	ldrh	r2, [r3, #0]
     ccc:	f019 0f08 	tst.w	r9, #8
     cd0:	bf0c      	ite	eq
     cd2:	2388      	moveq	r3, #136	; 0x88
     cd4:	23c8      	movne	r3, #200	; 0xc8
     cd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
     cda:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
     cde:	e707      	b.n	af0 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
     ce0:	2202      	movs	r2, #2
     ce2:	558a      	strb	r2, [r1, r6]
						break;
     ce4:	e7f1      	b.n	cca <usb_isr+0x26e>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
     ce6:	2203      	movs	r2, #3
     ce8:	558a      	strb	r2, [r1, r6]
						break;
     cea:	e7ee      	b.n	cca <usb_isr+0x26e>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
     cec:	2205      	movs	r2, #5
     cee:	558a      	strb	r2, [r1, r6]
						break;
     cf0:	e7eb      	b.n	cca <usb_isr+0x26e>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
     cf2:	07e0      	lsls	r0, r4, #31
     cf4:	f100 821a 	bmi.w	112c <usb_isr+0x6d0>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
     cf8:	0621      	lsls	r1, r4, #24
     cfa:	f100 8249 	bmi.w	1190 <usb_isr+0x734>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
     cfe:	07a2      	lsls	r2, r4, #30
     d00:	d506      	bpl.n	d10 <usb_isr+0x2b4>
		uint8_t err = USB0_ERRSTAT;
     d02:	4a1d      	ldr	r2, [pc, #116]	; (d78 <usb_isr+0x31c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
     d04:	491d      	ldr	r1, [pc, #116]	; (d7c <usb_isr+0x320>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
     d06:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
     d08:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
     d0a:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
     d0c:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
     d0e:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
     d10:	06e3      	lsls	r3, r4, #27
     d12:	d502      	bpl.n	d1a <usb_isr+0x2be>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
     d14:	4b19      	ldr	r3, [pc, #100]	; (d7c <usb_isr+0x320>)
     d16:	2210      	movs	r2, #16
     d18:	701a      	strb	r2, [r3, #0]
	}

}
     d1a:	b007      	add	sp, #28
     d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
     d20:	f000 fcd2 	bl	16c8 <usb_serial_flush_callback>
     d24:	e705      	b.n	b32 <usb_isr+0xd6>
     d26:	bf00      	nop
     d28:	1fff0000 	.word	0x1fff0000
     d2c:	1fff10f0 	.word	0x1fff10f0
     d30:	1fff109c 	.word	0x1fff109c
     d34:	1fff1450 	.word	0x1fff1450
     d38:	004000c8 	.word	0x004000c8
     d3c:	00400088 	.word	0x00400088
     d40:	1fff1178 	.word	0x1fff1178
     d44:	1fff1101 	.word	0x1fff1101
     d48:	1fff1180 	.word	0x1fff1180
     d4c:	1fff1164 	.word	0x1fff1164
     d50:	1fff1098 	.word	0x1fff1098
     d54:	1fff1100 	.word	0x1fff1100
     d58:	400720c0 	.word	0x400720c0
     d5c:	1fff1170 	.word	0x1fff1170
     d60:	1fff10ac 	.word	0x1fff10ac
     d64:	1fff116c 	.word	0x1fff116c
     d68:	40072098 	.word	0x40072098
     d6c:	40072094 	.word	0x40072094
     d70:	1fff1144 	.word	0x1fff1144
     d74:	1fff117c 	.word	0x1fff117c
     d78:	40072088 	.word	0x40072088
     d7c:	40072080 	.word	0x40072080
     d80:	40072090 	.word	0x40072090
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
     d84:	4aab      	ldr	r2, [pc, #684]	; (1034 <usb_isr+0x5d8>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
     d86:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
     d8a:	7813      	ldrb	r3, [r2, #0]
     d8c:	3301      	adds	r3, #1
     d8e:	7013      	strb	r3, [r2, #0]
     d90:	e6ae      	b.n	af0 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
     d92:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
     d96:	4da8      	ldr	r5, [pc, #672]	; (1038 <usb_isr+0x5dc>)
     d98:	e691      	b.n	abe <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
     d9a:	f242 0021 	movw	r0, #8225	; 0x2021
     d9e:	4281      	cmp	r1, r0
     da0:	f000 8135 	beq.w	100e <usb_isr+0x5b2>
     da4:	f200 81af 	bhi.w	1106 <usb_isr+0x6aa>
     da8:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
     dac:	f000 821b 	beq.w	11e6 <usb_isr+0x78a>
     db0:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
     db4:	f040 822b 	bne.w	120e <usb_isr+0x7b2>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
     db8:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
     dba:	49a0      	ldr	r1, [pc, #640]	; (103c <usb_isr+0x5e0>)
     dbc:	78a8      	ldrb	r0, [r5, #2]
     dbe:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
     dc0:	0612      	lsls	r2, r2, #24
     dc2:	f100 8345 	bmi.w	1450 <usb_isr+0x9f4>
     dc6:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
     dca:	499d      	ldr	r1, [pc, #628]	; (1040 <usb_isr+0x5e4>)
     dcc:	0613      	lsls	r3, r2, #24
     dce:	f100 833a 	bmi.w	1446 <usb_isr+0x9ea>
     dd2:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
     dd6:	499a      	ldr	r1, [pc, #616]	; (1040 <usb_isr+0x5e4>)
     dd8:	0615      	lsls	r5, r2, #24
     dda:	f100 832f 	bmi.w	143c <usb_isr+0x9e0>
     dde:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
     de2:	4997      	ldr	r1, [pc, #604]	; (1040 <usb_isr+0x5e4>)
     de4:	0614      	lsls	r4, r2, #24
     de6:	f100 8324 	bmi.w	1432 <usb_isr+0x9d6>
     dea:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
     dee:	4994      	ldr	r1, [pc, #592]	; (1040 <usb_isr+0x5e4>)
     df0:	0610      	lsls	r0, r2, #24
     df2:	f100 8319 	bmi.w	1428 <usb_isr+0x9cc>
     df6:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
     dfa:	4991      	ldr	r1, [pc, #580]	; (1040 <usb_isr+0x5e4>)
     dfc:	0612      	lsls	r2, r2, #24
     dfe:	f100 830e 	bmi.w	141e <usb_isr+0x9c2>
     e02:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
     e06:	498e      	ldr	r1, [pc, #568]	; (1040 <usb_isr+0x5e4>)
     e08:	0613      	lsls	r3, r2, #24
     e0a:	f100 8303 	bmi.w	1414 <usb_isr+0x9b8>
     e0e:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
     e12:	498b      	ldr	r1, [pc, #556]	; (1040 <usb_isr+0x5e4>)
     e14:	0615      	lsls	r5, r2, #24
     e16:	f100 82f8 	bmi.w	140a <usb_isr+0x9ae>
     e1a:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
     e1e:	4988      	ldr	r1, [pc, #544]	; (1040 <usb_isr+0x5e4>)
     e20:	0614      	lsls	r4, r2, #24
     e22:	f100 8329 	bmi.w	1478 <usb_isr+0xa1c>
     e26:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
     e2a:	4985      	ldr	r1, [pc, #532]	; (1040 <usb_isr+0x5e4>)
     e2c:	0610      	lsls	r0, r2, #24
     e2e:	f100 831e 	bmi.w	146e <usb_isr+0xa12>
     e32:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
     e36:	4982      	ldr	r1, [pc, #520]	; (1040 <usb_isr+0x5e4>)
     e38:	0612      	lsls	r2, r2, #24
     e3a:	f100 8313 	bmi.w	1464 <usb_isr+0xa08>
     e3e:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
     e42:	497f      	ldr	r1, [pc, #508]	; (1040 <usb_isr+0x5e4>)
     e44:	0613      	lsls	r3, r2, #24
     e46:	f100 8308 	bmi.w	145a <usb_isr+0x9fe>
     e4a:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
     e4e:	497c      	ldr	r1, [pc, #496]	; (1040 <usb_isr+0x5e4>)
     e50:	0615      	lsls	r5, r2, #24
     e52:	f100 831c 	bmi.w	148e <usb_isr+0xa32>
     e56:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
     e5a:	4979      	ldr	r1, [pc, #484]	; (1040 <usb_isr+0x5e4>)
     e5c:	0614      	lsls	r4, r2, #24
     e5e:	f100 8310 	bmi.w	1482 <usb_isr+0xa26>
     e62:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
     e66:	4976      	ldr	r1, [pc, #472]	; (1040 <usb_isr+0x5e4>)
     e68:	0610      	lsls	r0, r2, #24
     e6a:	f100 82c8 	bmi.w	13fe <usb_isr+0x9a2>
     e6e:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
     e72:	4973      	ldr	r1, [pc, #460]	; (1040 <usb_isr+0x5e4>)
     e74:	0612      	lsls	r2, r2, #24
     e76:	f100 82bc 	bmi.w	13f2 <usb_isr+0x996>
     e7a:	4872      	ldr	r0, [pc, #456]	; (1044 <usb_isr+0x5e8>)
     e7c:	4a72      	ldr	r2, [pc, #456]	; (1048 <usb_isr+0x5ec>)
     e7e:	4973      	ldr	r1, [pc, #460]	; (104c <usb_isr+0x5f0>)
     e80:	9001      	str	r0, [sp, #4]
     e82:	4873      	ldr	r0, [pc, #460]	; (1050 <usb_isr+0x5f4>)
     e84:	4d6c      	ldr	r5, [pc, #432]	; (1038 <usb_isr+0x5dc>)
     e86:	4c73      	ldr	r4, [pc, #460]	; (1054 <usb_isr+0x5f8>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
     e88:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
     e8a:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
     e8c:	9605      	str	r6, [sp, #20]
     e8e:	9502      	str	r5, [sp, #8]
     e90:	4680      	mov	r8, r0
     e92:	4617      	mov	r7, r2
     e94:	460e      	mov	r6, r1
     e96:	461d      	mov	r5, r3
     e98:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
     e9a:	6838      	ldr	r0, [r7, #0]
			while (p) {
     e9c:	b128      	cbz	r0, eaa <usb_isr+0x44e>
				n = p->next;
     e9e:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
     ea0:	f000 fbde 	bl	1660 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
     ea4:	4620      	mov	r0, r4
     ea6:	2c00      	cmp	r4, #0
     ea8:	d1f9      	bne.n	e9e <usb_isr+0x442>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
     eaa:	2300      	movs	r3, #0
     eac:	603b      	str	r3, [r7, #0]
			rx_last[i] = NULL;
     eae:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
     eb0:	6830      	ldr	r0, [r6, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
     eb2:	461a      	mov	r2, r3
     eb4:	2300      	movs	r3, #0
     eb6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
     eba:	b128      	cbz	r0, ec8 <usb_isr+0x46c>
				n = p->next;
     ebc:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
     ebe:	f000 fbcf 	bl	1660 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
     ec2:	4620      	mov	r0, r4
     ec4:	2c00      	cmp	r4, #0
     ec6:	d1f9      	bne.n	ebc <usb_isr+0x460>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
     ec8:	2200      	movs	r2, #0
     eca:	6032      	str	r2, [r6, #0]
			tx_last[i] = NULL;
     ecc:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
     ece:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
     ed2:	4611      	mov	r1, r2
     ed4:	2200      	movs	r2, #0
     ed6:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
     eda:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
     edc:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
     ede:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
     ee0:	f04f 0100 	mov.w	r1, #0
     ee4:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
     ee8:	2b03      	cmp	r3, #3
     eea:	d809      	bhi.n	f00 <usb_isr+0x4a4>
     eec:	e8df f013 	tbh	[pc, r3, lsl #1]
     ef0:	0004014b 	.word	0x0004014b
     ef4:	0004014b 	.word	0x0004014b
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
     ef8:	f04f 0301 	mov.w	r3, #1
     efc:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
     f00:	3501      	adds	r5, #1
     f02:	2d04      	cmp	r5, #4
     f04:	f107 0704 	add.w	r7, r7, #4
     f08:	f106 0604 	add.w	r6, r6, #4
     f0c:	f108 0801 	add.w	r8, r8, #1
     f10:	d1c3      	bne.n	e9a <usb_isr+0x43e>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
     f12:	4c51      	ldr	r4, [pc, #324]	; (1058 <usb_isr+0x5fc>)
			*reg = epconf;
     f14:	4b51      	ldr	r3, [pc, #324]	; (105c <usb_isr+0x600>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
     f16:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
     f18:	4d46      	ldr	r5, [pc, #280]	; (1034 <usb_isr+0x5d8>)
     f1a:	9f04      	ldr	r7, [sp, #16]
     f1c:	9e05      	ldr	r6, [sp, #20]
     f1e:	2100      	movs	r1, #0
     f20:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
     f22:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
     f24:	0713      	lsls	r3, r2, #28
     f26:	f100 824f 	bmi.w	13c8 <usb_isr+0x96c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
     f2a:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
     f2c:	494c      	ldr	r1, [pc, #304]	; (1060 <usb_isr+0x604>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
     f2e:	f8df 8110 	ldr.w	r8, [pc, #272]	; 1040 <usb_isr+0x5e4>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
     f32:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
     f34:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
     f36:	f04f 0100 	mov.w	r1, #0
     f3a:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
     f3e:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
     f42:	f100 822b 	bmi.w	139c <usb_isr+0x940>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
     f46:	4947      	ldr	r1, [pc, #284]	; (1064 <usb_isr+0x608>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
     f48:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
     f4a:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
     f4c:	2100      	movs	r1, #0
     f4e:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
     f52:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
     f56:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
     f58:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 1040 <usb_isr+0x5e4>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
     f5c:	f100 81dc 	bmi.w	1318 <usb_isr+0x8bc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
     f60:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
     f62:	4941      	ldr	r1, [pc, #260]	; (1068 <usb_isr+0x60c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
     f64:	4c36      	ldr	r4, [pc, #216]	; (1040 <usb_isr+0x5e4>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
     f66:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
     f68:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
     f6a:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
     f6c:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
     f70:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
     f74:	f100 81b9 	bmi.w	12ea <usb_isr+0x88e>
     f78:	7833      	ldrb	r3, [r6, #0]
     f7a:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
     f7c:	2100      	movs	r1, #0
     f7e:	f083 0201 	eor.w	r2, r3, #1
     f82:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
     f86:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
     f8a:	2000      	movs	r0, #0
     f8c:	9002      	str	r0, [sp, #8]
     f8e:	4680      	mov	r8, r0
     f90:	4684      	mov	ip, r0
     f92:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
     f94:	4935      	ldr	r1, [pc, #212]	; (106c <usb_isr+0x610>)
     f96:	780d      	ldrb	r5, [r1, #0]
     f98:	f045 0e02 	orr.w	lr, r5, #2
     f9c:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
     fa0:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     fa2:	9b01      	ldr	r3, [sp, #4]
     fa4:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
     fa6:	9b03      	ldr	r3, [sp, #12]
     fa8:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     faa:	bf0c      	ite	eq
     fac:	2488      	moveq	r4, #136	; 0x88
     fae:	24c8      	movne	r4, #200	; 0xc8
     fb0:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
     fb4:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     fb8:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
     fbc:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
     fbe:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     fc0:	f8df e07c 	ldr.w	lr, [pc, #124]	; 1040 <usb_isr+0x5e4>
	ep0_tx_data_toggle ^= 1;
     fc4:	4b2a      	ldr	r3, [pc, #168]	; (1070 <usb_isr+0x614>)
	ep0_tx_bdt_bank ^= 1;
     fc6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 106c <usb_isr+0x610>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
     fca:	2800      	cmp	r0, #0
     fcc:	f040 8126 	bne.w	121c <usb_isr+0x7c0>
     fd0:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
     fd4:	d11b      	bne.n	100e <usb_isr+0x5b2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
     fd6:	f044 0c02 	orr.w	ip, r4, #2
     fda:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
     fde:	9c02      	ldr	r4, [sp, #8]
     fe0:	f8df e05c 	ldr.w	lr, [pc, #92]	; 1040 <usb_isr+0x5e4>
     fe4:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     fe6:	2a00      	cmp	r2, #0
     fe8:	f040 812e 	bne.w	1248 <usb_isr+0x7ec>
     fec:	0402      	lsls	r2, r0, #16
     fee:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
     ff2:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
     ff6:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
     ffa:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
     ffc:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
     ffe:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    1000:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    1002:	2840      	cmp	r0, #64	; 0x40
    1004:	d103      	bne.n	100e <usb_isr+0x5b2>
    1006:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    1008:	4a1a      	ldr	r2, [pc, #104]	; (1074 <usb_isr+0x618>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    100a:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    100c:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    100e:	4a1a      	ldr	r2, [pc, #104]	; (1078 <usb_isr+0x61c>)
    1010:	2301      	movs	r3, #1
    1012:	7013      	strb	r3, [r2, #0]
    1014:	e628      	b.n	c68 <usb_isr+0x20c>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    1016:	5d8b      	ldrb	r3, [r1, r6]
    1018:	2b03      	cmp	r3, #3
    101a:	f200 812d 	bhi.w	1278 <usb_isr+0x81c>
    101e:	a201      	add	r2, pc, #4	; (adr r2, 1024 <usb_isr+0x5c8>)
    1020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1024:	00000af1 	.word	0x00000af1
    1028:	00000af1 	.word	0x00000af1
    102c:	0000117b 	.word	0x0000117b
    1030:	00001181 	.word	0x00001181
    1034:	1fff116d 	.word	0x1fff116d
    1038:	1fff109c 	.word	0x1fff109c
    103c:	1fff1178 	.word	0x1fff1178
    1040:	1fff0000 	.word	0x1fff0000
    1044:	1fff1154 	.word	0x1fff1154
    1048:	1fff10f0 	.word	0x1fff10f0
    104c:	1fff1144 	.word	0x1fff1144
    1050:	1fff117c 	.word	0x1fff117c
    1054:	1fff1450 	.word	0x1fff1450
    1058:	00002ba8 	.word	0x00002ba8
    105c:	400720c4 	.word	0x400720c4
    1060:	400720c8 	.word	0x400720c8
    1064:	400720cc 	.word	0x400720cc
    1068:	400720d0 	.word	0x400720d0
    106c:	1fff116c 	.word	0x1fff116c
    1070:	1fff1100 	.word	0x1fff1100
    1074:	1fff10ac 	.word	0x1fff10ac
    1078:	40072094 	.word	0x40072094
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    107c:	8892      	ldrh	r2, [r2, #4]
    107e:	b992      	cbnz	r2, 10a6 <usb_isr+0x64a>
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    1080:	4ab1      	ldr	r2, [pc, #708]	; (1348 <usb_isr+0x8ec>)
    1082:	780d      	ldrb	r5, [r1, #0]
    1084:	7848      	ldrb	r0, [r1, #1]
    1086:	7015      	strb	r5, [r2, #0]
    1088:	7050      	strb	r0, [r2, #1]
    108a:	788d      	ldrb	r5, [r1, #2]
    108c:	78c8      	ldrb	r0, [r1, #3]
    108e:	7095      	strb	r5, [r2, #2]
    1090:	70d0      	strb	r0, [r2, #3]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    1092:	6810      	ldr	r0, [r2, #0]
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    1094:	790d      	ldrb	r5, [r1, #4]
    1096:	7115      	strb	r5, [r2, #4]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    1098:	2886      	cmp	r0, #134	; 0x86
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    109a:	794d      	ldrb	r5, [r1, #5]
    109c:	7989      	ldrb	r1, [r1, #6]
    109e:	7155      	strb	r5, [r2, #5]
    10a0:	7191      	strb	r1, [r2, #6]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    10a2:	f000 80a5 	beq.w	11f0 <usb_isr+0x794>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    10a6:	49a9      	ldr	r1, [pc, #676]	; (134c <usb_isr+0x8f0>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    10a8:	4ea9      	ldr	r6, [pc, #676]	; (1350 <usb_isr+0x8f4>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    10aa:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    10ac:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    10ae:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    10b2:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    10b4:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    10b8:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    10ba:	bf0c      	ite	eq
    10bc:	2188      	moveq	r1, #136	; 0x88
    10be:	21c8      	movne	r1, #200	; 0xc8
    10c0:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    10c4:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    10c8:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    10cc:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    10ce:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    10d0:	6051      	str	r1, [r2, #4]
    10d2:	e5d4      	b.n	c7e <usb_isr+0x222>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    10d4:	f240 3202 	movw	r2, #770	; 0x302
    10d8:	4291      	cmp	r1, r2
    10da:	f040 808d 	bne.w	11f8 <usb_isr+0x79c>
    10de:	88a9      	ldrh	r1, [r5, #4]
    10e0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    10e4:	2904      	cmp	r1, #4
    10e6:	f200 8092 	bhi.w	120e <usb_isr+0x7b2>
    10ea:	886a      	ldrh	r2, [r5, #2]
    10ec:	2a00      	cmp	r2, #0
    10ee:	f040 808e 	bne.w	120e <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    10f2:	4898      	ldr	r0, [pc, #608]	; (1354 <usb_isr+0x8f8>)
    10f4:	f8cd e004 	str.w	lr, [sp, #4]
    10f8:	0089      	lsls	r1, r1, #2
    10fa:	4408      	add	r0, r1
    10fc:	7801      	ldrb	r1, [r0, #0]
    10fe:	f041 0102 	orr.w	r1, r1, #2
    1102:	7001      	strb	r1, [r0, #0]
    1104:	e741      	b.n	f8a <usb_isr+0x52e>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    1106:	f242 2021 	movw	r0, #8737	; 0x2221
    110a:	4281      	cmp	r1, r0
    110c:	d17b      	bne.n	1206 <usb_isr+0x7aa>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    110e:	88a9      	ldrh	r1, [r5, #4]
    1110:	2900      	cmp	r1, #0
    1112:	f040 80e4 	bne.w	12de <usb_isr+0x882>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    1116:	4b90      	ldr	r3, [pc, #576]	; (1358 <usb_isr+0x8fc>)
    1118:	4a90      	ldr	r2, [pc, #576]	; (135c <usb_isr+0x900>)
			usb_cdc_line_rtsdtr = setup.wValue;
    111a:	4891      	ldr	r0, [pc, #580]	; (1360 <usb_isr+0x904>)
    111c:	78ac      	ldrb	r4, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    111e:	681d      	ldr	r5, [r3, #0]
    1120:	6015      	str	r5, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    1122:	f8cd e004 	str.w	lr, [sp, #4]
    1126:	460a      	mov	r2, r1
    1128:	7004      	strb	r4, [r0, #0]
    112a:	e72e      	b.n	f8a <usb_isr+0x52e>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    112c:	4b8d      	ldr	r3, [pc, #564]	; (1364 <usb_isr+0x908>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    112e:	488e      	ldr	r0, [pc, #568]	; (1368 <usb_isr+0x90c>)
		ep0_tx_bdt_bank = 0;
    1130:	4986      	ldr	r1, [pc, #536]	; (134c <usb_isr+0x8f0>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    1132:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    1134:	f04f 0e02 	mov.w	lr, #2
    1138:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    113c:	4f85      	ldr	r7, [pc, #532]	; (1354 <usb_isr+0x8f8>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    113e:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    1140:	498a      	ldr	r1, [pc, #552]	; (136c <usb_isr+0x910>)
    1142:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    1144:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    1146:	4e8a      	ldr	r6, [pc, #552]	; (1370 <usb_isr+0x914>)
		USB0_ISTAT = 0xFF;
    1148:	4d8a      	ldr	r5, [pc, #552]	; (1374 <usb_isr+0x918>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    114a:	4c8b      	ldr	r4, [pc, #556]	; (1378 <usb_isr+0x91c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    114c:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    114e:	210d      	movs	r1, #13
    1150:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    1152:	21ff      	movs	r1, #255	; 0xff
    1154:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    1156:	f8df e240 	ldr.w	lr, [pc, #576]	; 1398 <usb_isr+0x93c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    115a:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    115c:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    115e:	4d87      	ldr	r5, [pc, #540]	; (137c <usb_isr+0x920>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    1160:	4a87      	ldr	r2, [pc, #540]	; (1380 <usb_isr+0x924>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    1162:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    1166:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    1168:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    116a:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    116e:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    1170:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    1172:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    1174:	b007      	add	sp, #28
    1176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    117a:	2300      	movs	r3, #0
    117c:	558b      	strb	r3, [r1, r6]
						break;
    117e:	e4b7      	b.n	af0 <usb_isr+0x94>
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    1180:	2301      	movs	r3, #1
    1182:	558b      	strb	r3, [r1, r6]
						break;
    1184:	e4b4      	b.n	af0 <usb_isr+0x94>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    1186:	f04f 0300 	mov.w	r3, #0
    118a:	f888 3000 	strb.w	r3, [r8]
    118e:	e6b7      	b.n	f00 <usb_isr+0x4a4>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    1190:	4970      	ldr	r1, [pc, #448]	; (1354 <usb_isr+0x8f8>)
		USB0_ISTAT = USB_ISTAT_STALL;
    1192:	4b78      	ldr	r3, [pc, #480]	; (1374 <usb_isr+0x918>)
    1194:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    1196:	200d      	movs	r0, #13
    1198:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    119a:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    119c:	07a2      	lsls	r2, r4, #30
    119e:	f57f adb7 	bpl.w	d10 <usb_isr+0x2b4>
    11a2:	e5ae      	b.n	d02 <usb_isr+0x2a6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    11a4:	4c77      	ldr	r4, [pc, #476]	; (1384 <usb_isr+0x928>)
		reply_buffer[1] = 0;
		datalen = 2;
    11a6:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    11aa:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    11ac:	7062      	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    11ae:	88ea      	ldrh	r2, [r5, #6]
    11b0:	4572      	cmp	r2, lr
    11b2:	f080 81a3 	bcs.w	14fc <usb_isr+0xaa0>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    11b6:	4965      	ldr	r1, [pc, #404]	; (134c <usb_isr+0x8f0>)
    11b8:	780d      	ldrb	r5, [r1, #0]
    11ba:	2a40      	cmp	r2, #64	; 0x40
    11bc:	4694      	mov	ip, r2
    11be:	f045 0e02 	orr.w	lr, r5, #2
    11c2:	bf28      	it	cs
    11c4:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    11c8:	eb04 030c 	add.w	r3, r4, ip
    11cc:	eb09 00ce 	add.w	r0, r9, lr, lsl #3
    11d0:	9302      	str	r3, [sp, #8]
    11d2:	2301      	movs	r3, #1
    11d4:	6044      	str	r4, [r0, #4]
    11d6:	ea4f 480c 	mov.w	r8, ip, lsl #16
    11da:	ebcc 0002 	rsb	r0, ip, r2
    11de:	9301      	str	r3, [sp, #4]
    11e0:	2200      	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    11e2:	24c8      	movs	r4, #200	; 0xc8
    11e4:	e6e4      	b.n	fb0 <usb_isr+0x554>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    11e6:	4a68      	ldr	r2, [pc, #416]	; (1388 <usb_isr+0x92c>)
    11e8:	4c66      	ldr	r4, [pc, #408]	; (1384 <usb_isr+0x928>)
    11ea:	7812      	ldrb	r2, [r2, #0]
    11ec:	7022      	strb	r2, [r4, #0]
    11ee:	e7de      	b.n	11ae <usb_isr+0x752>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    11f0:	4a66      	ldr	r2, [pc, #408]	; (138c <usb_isr+0x930>)
    11f2:	210f      	movs	r1, #15
    11f4:	7011      	strb	r1, [r2, #0]
    11f6:	e756      	b.n	10a6 <usb_isr+0x64a>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    11f8:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    11fc:	d107      	bne.n	120e <usb_isr+0x7b2>
    11fe:	2301      	movs	r3, #1
    1200:	2200      	movs	r2, #0
    1202:	9301      	str	r3, [sp, #4]
    1204:	e6c1      	b.n	f8a <usb_isr+0x52e>
    1206:	f242 3221 	movw	r2, #8993	; 0x2321
    120a:	4291      	cmp	r1, r2
    120c:	d0f7      	beq.n	11fe <usb_isr+0x7a2>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    120e:	4a51      	ldr	r2, [pc, #324]	; (1354 <usb_isr+0x8f8>)
    1210:	230f      	movs	r3, #15
    1212:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    1214:	4a54      	ldr	r2, [pc, #336]	; (1368 <usb_isr+0x90c>)
    1216:	2301      	movs	r3, #1
    1218:	7013      	strb	r3, [r2, #0]
    121a:	e525      	b.n	c68 <usb_isr+0x20c>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    121c:	2840      	cmp	r0, #64	; 0x40
    121e:	f67f aeda 	bls.w	fd6 <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    1222:	f044 0402 	orr.w	r4, r4, #2
    1226:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    122a:	9e02      	ldr	r6, [sp, #8]
    122c:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    122e:	b1ba      	cbz	r2, 1260 <usb_isr+0x804>
	ep0_tx_data_toggle ^= 1;
    1230:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1234:	4a56      	ldr	r2, [pc, #344]	; (1390 <usb_isr+0x934>)
	ep0_tx_data_toggle ^= 1;
    1236:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    1238:	4633      	mov	r3, r6
    123a:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    123c:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    1240:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1242:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    1246:	e6df      	b.n	1008 <usb_isr+0x5ac>
	ep0_tx_data_toggle ^= 1;
    1248:	f89d 3004 	ldrb.w	r3, [sp, #4]
    124c:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    124e:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    1250:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    1252:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1254:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    1258:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    125a:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    125e:	e6d0      	b.n	1002 <usb_isr+0x5a6>
	ep0_tx_data_toggle ^= 1;
    1260:	f89d 1004 	ldrb.w	r1, [sp, #4]
    1264:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    1266:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1268:	4a40      	ldr	r2, [pc, #256]	; (136c <usb_isr+0x910>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    126a:	f888 5000 	strb.w	r5, [r8]
    126e:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    1270:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    1272:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    1276:	e6c7      	b.n	1008 <usb_isr+0x5ac>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    1278:	f019 0f08 	tst.w	r9, #8
    127c:	bf0c      	ite	eq
    127e:	2302      	moveq	r3, #2
    1280:	2303      	movne	r3, #3
    1282:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    1284:	e434      	b.n	af0 <usb_isr+0x94>
    1286:	88a9      	ldrh	r1, [r5, #4]
    1288:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    128c:	2904      	cmp	r1, #4
    128e:	d8be      	bhi.n	120e <usb_isr+0x7b2>
    1290:	886a      	ldrh	r2, [r5, #2]
    1292:	2a00      	cmp	r2, #0
    1294:	d1bb      	bne.n	120e <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    1296:	482f      	ldr	r0, [pc, #188]	; (1354 <usb_isr+0x8f8>)
    1298:	f8cd e004 	str.w	lr, [sp, #4]
    129c:	0089      	lsls	r1, r1, #2
    129e:	4408      	add	r0, r1
    12a0:	7801      	ldrb	r1, [r0, #0]
    12a2:	f021 0102 	bic.w	r1, r1, #2
    12a6:	7001      	strb	r1, [r0, #0]
    12a8:	e66f      	b.n	f8a <usb_isr+0x52e>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    12aa:	4a3a      	ldr	r2, [pc, #232]	; (1394 <usb_isr+0x938>)
    12ac:	6854      	ldr	r4, [r2, #4]
    12ae:	2c00      	cmp	r4, #0
    12b0:	d0ad      	beq.n	120e <usb_isr+0x7b2>
    12b2:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    12b4:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    12b8:	e003      	b.n	12c2 <usb_isr+0x866>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    12ba:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    12bc:	6854      	ldr	r4, [r2, #4]
    12be:	2c00      	cmp	r4, #0
    12c0:	d0a5      	beq.n	120e <usb_isr+0x7b2>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    12c2:	8813      	ldrh	r3, [r2, #0]
    12c4:	4283      	cmp	r3, r0
    12c6:	d1f8      	bne.n	12ba <usb_isr+0x85e>
    12c8:	8853      	ldrh	r3, [r2, #2]
    12ca:	4573      	cmp	r3, lr
    12cc:	d1f5      	bne.n	12ba <usb_isr+0x85e>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    12ce:	0a00      	lsrs	r0, r0, #8
    12d0:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    12d2:	bf0c      	ite	eq
    12d4:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    12d8:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    12dc:	e767      	b.n	11ae <usb_isr+0x752>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    12de:	f8cd e004 	str.w	lr, [sp, #4]
    12e2:	e652      	b.n	f8a <usb_isr+0x52e>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    12e4:	f04f 0e02 	mov.w	lr, #2
    12e8:	e761      	b.n	11ae <usb_isr+0x752>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    12ea:	f000 f999 	bl	1620 <usb_malloc>
				if (p) {
    12ee:	2800      	cmp	r0, #0
    12f0:	f000 80f1 	beq.w	14d6 <usb_isr+0xa7a>
					table[index(i, RX, EVEN)].addr = p->buf;
    12f4:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    12f6:	4a1d      	ldr	r2, [pc, #116]	; (136c <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    12f8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    12fc:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    1300:	f000 f98e 	bl	1620 <usb_malloc>
				if (p) {
    1304:	2800      	cmp	r0, #0
    1306:	f000 80e0 	beq.w	14ca <usb_isr+0xa6e>
					table[index(i, RX, ODD)].addr = p->buf;
    130a:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    130c:	4a20      	ldr	r2, [pc, #128]	; (1390 <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    130e:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    1312:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    1316:	e62f      	b.n	f78 <usb_isr+0x51c>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    1318:	f000 f982 	bl	1620 <usb_malloc>
				if (p) {
    131c:	2800      	cmp	r0, #0
    131e:	f000 80e6 	beq.w	14ee <usb_isr+0xa92>
					table[index(i, RX, EVEN)].addr = p->buf;
    1322:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    1324:	4a11      	ldr	r2, [pc, #68]	; (136c <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    1326:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    132a:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    132e:	f000 f977 	bl	1620 <usb_malloc>
				if (p) {
    1332:	2800      	cmp	r0, #0
    1334:	f000 80d5 	beq.w	14e2 <usb_isr+0xa86>
					table[index(i, RX, ODD)].addr = p->buf;
    1338:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    133a:	4a15      	ldr	r2, [pc, #84]	; (1390 <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    133c:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    1340:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    1344:	e60c      	b.n	f60 <usb_isr+0x504>
    1346:	bf00      	nop
    1348:	1fff1458 	.word	0x1fff1458
    134c:	1fff116c 	.word	0x1fff116c
    1350:	1fff1100 	.word	0x1fff1100
    1354:	400720c0 	.word	0x400720c0
    1358:	1fff1000 	.word	0x1fff1000
    135c:	1fff1460 	.word	0x1fff1460
    1360:	1fff118c 	.word	0x1fff118c
    1364:	1fff0000 	.word	0x1fff0000
    1368:	40072094 	.word	0x40072094
    136c:	00400088 	.word	0x00400088
    1370:	40072088 	.word	0x40072088
    1374:	40072080 	.word	0x40072080
    1378:	40072098 	.word	0x40072098
    137c:	1fff10b0 	.word	0x1fff10b0
    1380:	1fff1104 	.word	0x1fff1104
    1384:	1fff1170 	.word	0x1fff1170
    1388:	1fff1178 	.word	0x1fff1178
    138c:	1fff1101 	.word	0x1fff1101
    1390:	004000c8 	.word	0x004000c8
    1394:	00002bac 	.word	0x00002bac
    1398:	4007208c 	.word	0x4007208c
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    139c:	f000 f940 	bl	1620 <usb_malloc>
				if (p) {
    13a0:	2800      	cmp	r0, #0
    13a2:	f000 808c 	beq.w	14be <usb_isr+0xa62>
					table[index(i, RX, EVEN)].addr = p->buf;
    13a6:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    13a8:	4a5d      	ldr	r2, [pc, #372]	; (1520 <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    13aa:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    13ae:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    13b2:	f000 f935 	bl	1620 <usb_malloc>
				if (p) {
    13b6:	2800      	cmp	r0, #0
    13b8:	d07b      	beq.n	14b2 <usb_isr+0xa56>
					table[index(i, RX, ODD)].addr = p->buf;
    13ba:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    13bc:	4a59      	ldr	r2, [pc, #356]	; (1524 <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    13be:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    13c2:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    13c6:	e5be      	b.n	f46 <usb_isr+0x4ea>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    13c8:	f000 f92a 	bl	1620 <usb_malloc>
				if (p) {
    13cc:	2800      	cmp	r0, #0
    13ce:	d06a      	beq.n	14a6 <usb_isr+0xa4a>
					table[index(i, RX, EVEN)].addr = p->buf;
    13d0:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    13d2:	4a53      	ldr	r2, [pc, #332]	; (1520 <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    13d4:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    13d8:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    13dc:	f000 f920 	bl	1620 <usb_malloc>
				if (p) {
    13e0:	2800      	cmp	r0, #0
    13e2:	d05a      	beq.n	149a <usb_isr+0xa3e>
					table[index(i, RX, ODD)].addr = p->buf;
    13e4:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    13e6:	4a4f      	ldr	r2, [pc, #316]	; (1524 <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    13e8:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    13ec:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    13f0:	e59b      	b.n	f2a <usb_isr+0x4ce>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    13f2:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    13f6:	3808      	subs	r0, #8
    13f8:	f000 f932 	bl	1660 <usb_free>
    13fc:	e53d      	b.n	e7a <usb_isr+0x41e>
    13fe:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    1402:	3808      	subs	r0, #8
    1404:	f000 f92c 	bl	1660 <usb_free>
    1408:	e531      	b.n	e6e <usb_isr+0x412>
    140a:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    140c:	3808      	subs	r0, #8
    140e:	f000 f927 	bl	1660 <usb_free>
    1412:	e502      	b.n	e1a <usb_isr+0x3be>
    1414:	6d48      	ldr	r0, [r1, #84]	; 0x54
    1416:	3808      	subs	r0, #8
    1418:	f000 f922 	bl	1660 <usb_free>
    141c:	e4f7      	b.n	e0e <usb_isr+0x3b2>
    141e:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    1420:	3808      	subs	r0, #8
    1422:	f000 f91d 	bl	1660 <usb_free>
    1426:	e4ec      	b.n	e02 <usb_isr+0x3a6>
    1428:	6c48      	ldr	r0, [r1, #68]	; 0x44
    142a:	3808      	subs	r0, #8
    142c:	f000 f918 	bl	1660 <usb_free>
    1430:	e4e1      	b.n	df6 <usb_isr+0x39a>
    1432:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    1434:	3808      	subs	r0, #8
    1436:	f000 f913 	bl	1660 <usb_free>
    143a:	e4d6      	b.n	dea <usb_isr+0x38e>
    143c:	6b48      	ldr	r0, [r1, #52]	; 0x34
    143e:	3808      	subs	r0, #8
    1440:	f000 f90e 	bl	1660 <usb_free>
    1444:	e4cb      	b.n	dde <usb_isr+0x382>
    1446:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    1448:	3808      	subs	r0, #8
    144a:	f000 f909 	bl	1660 <usb_free>
    144e:	e4c0      	b.n	dd2 <usb_isr+0x376>
    1450:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1452:	3808      	subs	r0, #8
    1454:	f000 f904 	bl	1660 <usb_free>
    1458:	e4b5      	b.n	dc6 <usb_isr+0x36a>
    145a:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    145c:	3808      	subs	r0, #8
    145e:	f000 f8ff 	bl	1660 <usb_free>
    1462:	e4f2      	b.n	e4a <usb_isr+0x3ee>
    1464:	6f48      	ldr	r0, [r1, #116]	; 0x74
    1466:	3808      	subs	r0, #8
    1468:	f000 f8fa 	bl	1660 <usb_free>
    146c:	e4e7      	b.n	e3e <usb_isr+0x3e2>
    146e:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    1470:	3808      	subs	r0, #8
    1472:	f000 f8f5 	bl	1660 <usb_free>
    1476:	e4dc      	b.n	e32 <usb_isr+0x3d6>
    1478:	6e48      	ldr	r0, [r1, #100]	; 0x64
    147a:	3808      	subs	r0, #8
    147c:	f000 f8f0 	bl	1660 <usb_free>
    1480:	e4d1      	b.n	e26 <usb_isr+0x3ca>
    1482:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    1486:	3808      	subs	r0, #8
    1488:	f000 f8ea 	bl	1660 <usb_free>
    148c:	e4e9      	b.n	e62 <usb_isr+0x406>
    148e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    1492:	3808      	subs	r0, #8
    1494:	f000 f8e4 	bl	1660 <usb_free>
    1498:	e4dd      	b.n	e56 <usb_isr+0x3fa>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    149a:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    149c:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    14a0:	3201      	adds	r2, #1
    14a2:	702a      	strb	r2, [r5, #0]
    14a4:	e541      	b.n	f2a <usb_isr+0x4ce>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    14a6:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    14a8:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    14ac:	3201      	adds	r2, #1
    14ae:	702a      	strb	r2, [r5, #0]
    14b0:	e794      	b.n	13dc <usb_isr+0x980>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    14b2:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    14b4:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    14b8:	3201      	adds	r2, #1
    14ba:	702a      	strb	r2, [r5, #0]
    14bc:	e543      	b.n	f46 <usb_isr+0x4ea>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    14be:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    14c0:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    14c4:	3201      	adds	r2, #1
    14c6:	702a      	strb	r2, [r5, #0]
    14c8:	e773      	b.n	13b2 <usb_isr+0x956>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    14ca:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    14cc:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    14d0:	3201      	adds	r2, #1
    14d2:	702a      	strb	r2, [r5, #0]
    14d4:	e550      	b.n	f78 <usb_isr+0x51c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    14d6:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    14d8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    14dc:	3201      	adds	r2, #1
    14de:	702a      	strb	r2, [r5, #0]
    14e0:	e70e      	b.n	1300 <usb_isr+0x8a4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    14e2:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    14e4:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    14e8:	3201      	adds	r2, #1
    14ea:	702a      	strb	r2, [r5, #0]
    14ec:	e538      	b.n	f60 <usb_isr+0x504>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    14ee:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    14f0:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    14f4:	3201      	adds	r2, #1
    14f6:	702a      	strb	r2, [r5, #0]
    14f8:	e719      	b.n	132e <usb_isr+0x8d2>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    14fa:	be00      	bkpt	0x0000
    14fc:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    1500:	46f4      	mov	ip, lr
    1502:	bf28      	it	cs
    1504:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    1508:	eb04 030c 	add.w	r3, r4, ip
    150c:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    150e:	2301      	movs	r3, #1
    1510:	ebcc 000e 	rsb	r0, ip, lr
    1514:	ea4f 480c 	mov.w	r8, ip, lsl #16
    1518:	2200      	movs	r2, #0
    151a:	9301      	str	r3, [sp, #4]
    151c:	e53a      	b.n	f94 <usb_isr+0x538>
    151e:	bf00      	nop
    1520:	00400088 	.word	0x00400088
    1524:	004000c8 	.word	0x004000c8

00001528 <usb_init>:
}



void usb_init(void)
{
    1528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    152c:	f000 fd4e 	bl	1fcc <usb_init_serialnumber>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    1530:	4c2f      	ldr	r4, [pc, #188]	; (15f0 <usb_init+0xc8>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    1532:	4b30      	ldr	r3, [pc, #192]	; (15f4 <usb_init+0xcc>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    1534:	4830      	ldr	r0, [pc, #192]	; (15f8 <usb_init+0xd0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    1536:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1610 <usb_init+0xe8>
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    153a:	4f30      	ldr	r7, [pc, #192]	; (15fc <usb_init+0xd4>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    153c:	4d30      	ldr	r5, [pc, #192]	; (1600 <usb_init+0xd8>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    153e:	4e31      	ldr	r6, [pc, #196]	; (1604 <usb_init+0xdc>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    1540:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 1614 <usb_init+0xec>
	USB0_ERRSTAT = 0xFF;
    1544:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 1618 <usb_init+0xf0>
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    1548:	2200      	movs	r2, #0
    154a:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    154c:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    154e:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    1550:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    1552:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    1554:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    1556:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    1558:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    155a:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    155c:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    155e:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    1560:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    1562:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    1564:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    1566:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    1568:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    156a:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    156c:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    156e:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    1570:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    1572:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    1574:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    1576:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    1578:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    157a:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    157c:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    157e:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    1580:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    1582:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    1584:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    1586:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    1588:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    158a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    158e:	6821      	ldr	r1, [r4, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    1590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    1594:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    1598:	6021      	str	r1, [r4, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    159a:	6801      	ldr	r1, [r0, #0]
    159c:	f041 7140 	orr.w	r1, r1, #50331648	; 0x3000000
    15a0:	6001      	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    15a2:	f3c3 2107 	ubfx	r1, r3, #8, #8
    15a6:	f888 1000 	strb.w	r1, [r8]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    15aa:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    15ae:	f3c3 4107 	ubfx	r1, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    15b2:	0e1b      	lsrs	r3, r3, #24
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    15b4:	7039      	strb	r1, [r7, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    15b6:	34cc      	adds	r4, #204	; 0xcc
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    15b8:	702b      	strb	r3, [r5, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    15ba:	f100 4020 	add.w	r0, r0, #2684354560	; 0xa0000000
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    15be:	23ff      	movs	r3, #255	; 0xff
    15c0:	f88c 3000 	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    15c4:	4d10      	ldr	r5, [pc, #64]	; (1608 <usb_init+0xe0>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    15c6:	f88e 3000 	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    15ca:	f600 1004 	addw	r0, r0, #2308	; 0x904
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    15ce:	7033      	strb	r3, [r6, #0]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    15d0:	490e      	ldr	r1, [pc, #56]	; (160c <usb_init+0xe4>)
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    15d2:	2301      	movs	r3, #1
    15d4:	f808 3c08 	strb.w	r3, [r8, #-8]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    15d8:	2670      	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    15da:	7022      	strb	r2, [r4, #0]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    15dc:	f44f 1400 	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    15e0:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    15e2:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    15e6:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    15e8:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    15ea:	700a      	strb	r2, [r1, #0]
    15ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15f0:	40048034 	.word	0x40048034
    15f4:	1fff0000 	.word	0x1fff0000
    15f8:	4000d800 	.word	0x4000d800
    15fc:	400720b0 	.word	0x400720b0
    1600:	400720b4 	.word	0x400720b4
    1604:	40072010 	.word	0x40072010
    1608:	e000e435 	.word	0xe000e435
    160c:	40072108 	.word	0x40072108
    1610:	4007209c 	.word	0x4007209c
    1614:	40072080 	.word	0x40072080
    1618:	40072088 	.word	0x40072088

0000161c <serialEvent()>:
    161c:	4770      	bx	lr
    161e:	bf00      	nop

00001620 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    1620:	b672      	cpsid	i
	avail = usb_buffer_available;
    1622:	480d      	ldr	r0, [pc, #52]	; (1658 <usb_malloc+0x38>)
    1624:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    1626:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    162a:	2b0b      	cmp	r3, #11
    162c:	dc10      	bgt.n	1650 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    162e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    1632:	40d9      	lsrs	r1, r3
    1634:	ea22 0201 	bic.w	r2, r2, r1
    1638:	6002      	str	r2, [r0, #0]
	__enable_irq();
    163a:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    163c:	4807      	ldr	r0, [pc, #28]	; (165c <usb_malloc+0x3c>)
    163e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    1642:	00db      	lsls	r3, r3, #3
    1644:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    1646:	2100      	movs	r1, #0
    1648:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    164a:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    164c:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    164e:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    1650:	b662      	cpsie	i
		return NULL;
    1652:	2000      	movs	r0, #0
    1654:	4770      	bx	lr
    1656:	bf00      	nop
    1658:	1fff06fc 	.word	0x1fff06fc
    165c:	1fff0398 	.word	0x1fff0398

00001660 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    1660:	4b0d      	ldr	r3, [pc, #52]	; (1698 <usb_free+0x38>)
    1662:	4a0e      	ldr	r2, [pc, #56]	; (169c <usb_free+0x3c>)
    1664:	1ac3      	subs	r3, r0, r3
    1666:	fba2 2303 	umull	r2, r3, r2, r3
    166a:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    166c:	2b0b      	cmp	r3, #11
    166e:	d80c      	bhi.n	168a <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    1670:	4a0b      	ldr	r2, [pc, #44]	; (16a0 <usb_free+0x40>)
    1672:	7812      	ldrb	r2, [r2, #0]
    1674:	b952      	cbnz	r2, 168c <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    1676:	b672      	cpsid	i
	usb_buffer_available |= mask;
    1678:	480a      	ldr	r0, [pc, #40]	; (16a4 <usb_free+0x44>)
    167a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    167e:	6802      	ldr	r2, [r0, #0]
    1680:	fa21 f303 	lsr.w	r3, r1, r3
    1684:	431a      	orrs	r2, r3
    1686:	6002      	str	r2, [r0, #0]
	__enable_irq();
    1688:	b662      	cpsie	i
    168a:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    168c:	4a06      	ldr	r2, [pc, #24]	; (16a8 <usb_free+0x48>)
    168e:	7812      	ldrb	r2, [r2, #0]
    1690:	2a00      	cmp	r2, #0
    1692:	d0f0      	beq.n	1676 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    1694:	f7ff b93c 	b.w	910 <usb_rx_memory>
    1698:	1fff0398 	.word	0x1fff0398
    169c:	38e38e39 	.word	0x38e38e39
    16a0:	1fff116d 	.word	0x1fff116d
    16a4:	1fff06fc 	.word	0x1fff06fc
    16a8:	1fff1178 	.word	0x1fff1178

000016ac <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    16ac:	4b04      	ldr	r3, [pc, #16]	; (16c0 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    16ae:	4a05      	ldr	r2, [pc, #20]	; (16c4 <usb_serial_available+0x18>)
    16b0:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    16b2:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    16b4:	b11b      	cbz	r3, 16be <usb_serial_available+0x12>
    16b6:	881a      	ldrh	r2, [r3, #0]
    16b8:	885b      	ldrh	r3, [r3, #2]
    16ba:	1ad3      	subs	r3, r2, r3
    16bc:	4418      	add	r0, r3
	return count;
}
    16be:	4770      	bx	lr
    16c0:	1fff1188 	.word	0x1fff1188
    16c4:	1fff1450 	.word	0x1fff1450

000016c8 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    16c8:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    16ca:	4b0e      	ldr	r3, [pc, #56]	; (1704 <usb_serial_flush_callback+0x3c>)
    16cc:	781b      	ldrb	r3, [r3, #0]
    16ce:	b973      	cbnz	r3, 16ee <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    16d0:	4c0d      	ldr	r4, [pc, #52]	; (1708 <usb_serial_flush_callback+0x40>)
    16d2:	6821      	ldr	r1, [r4, #0]
    16d4:	b161      	cbz	r1, 16f0 <usb_serial_flush_callback+0x28>
    16d6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    16da:	884b      	ldrh	r3, [r1, #2]
    16dc:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    16de:	2004      	movs	r0, #4
    16e0:	f7ff f97a 	bl	9d8 <usb_tx>
		tx_packet = NULL;
    16e4:	6025      	str	r5, [r4, #0]
    16e6:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    16e8:	4b08      	ldr	r3, [pc, #32]	; (170c <usb_serial_flush_callback+0x44>)
    16ea:	2201      	movs	r2, #1
    16ec:	701a      	strb	r2, [r3, #0]
    16ee:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    16f0:	f7ff ff96 	bl	1620 <usb_malloc>
		if (tx) {
    16f4:	2800      	cmp	r0, #0
    16f6:	d0f7      	beq.n	16e8 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    16f8:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    16fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    16fe:	2004      	movs	r0, #4
    1700:	f7ff b96a 	b.w	9d8 <usb_tx>
    1704:	1fff1181 	.word	0x1fff1181
    1708:	1fff1184 	.word	0x1fff1184
    170c:	1fff1180 	.word	0x1fff1180

00001710 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    1710:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    1712:	4c2c      	ldr	r4, [pc, #176]	; (17c4 <yield+0xb4>)
    1714:	7823      	ldrb	r3, [r4, #0]
    1716:	b103      	cbz	r3, 171a <yield+0xa>
    1718:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
    171a:	2301      	movs	r3, #1
    171c:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    171e:	f7ff ffc5 	bl	16ac <usb_serial_available>
	if (Serial.available()) serialEvent();
    1722:	2800      	cmp	r0, #0
    1724:	d142      	bne.n	17ac <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    1726:	f7ff f85d 	bl	7e4 <serial_available>
	if (SerialUSB1.available()) serialEventUSB1();
#endif
#ifdef USB_TRIPLE_SERIAL
	if (SerialUSB2.available()) serialEventUSB2();
#endif
	if (Serial1.available()) serialEvent1();
    172a:	2800      	cmp	r0, #0
    172c:	d13b      	bne.n	17a6 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    172e:	f000 f9c7 	bl	1ac0 <serial2_available>
	if (Serial2.available()) serialEvent2();
    1732:	2800      	cmp	r0, #0
    1734:	d134      	bne.n	17a0 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    1736:	f000 fa59 	bl	1bec <serial3_available>
	if (Serial3.available()) serialEvent3();
    173a:	bb70      	cbnz	r0, 179a <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    173c:	f000 fad2 	bl	1ce4 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    1740:	bb40      	cbnz	r0, 1794 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
    1742:	f000 fb4b 	bl	1ddc <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    1746:	bb10      	cbnz	r0, 178e <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
    1748:	f000 fbc4 	bl	1ed4 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    174c:	b9e0      	cbnz	r0, 1788 <yield+0x78>
#endif
	running = 0;
    174e:	2300      	movs	r3, #0
    1750:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    1752:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    1756:	2b00      	cmp	r3, #0
    1758:	d1de      	bne.n	1718 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    175a:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    175e:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    1760:	4b19      	ldr	r3, [pc, #100]	; (17c8 <yield+0xb8>)
    1762:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    1764:	b328      	cbz	r0, 17b2 <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    1766:	4c19      	ldr	r4, [pc, #100]	; (17cc <yield+0xbc>)
    1768:	7822      	ldrb	r2, [r4, #0]
    176a:	bb12      	cbnz	r2, 17b2 <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    176c:	6945      	ldr	r5, [r0, #20]
    176e:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    1770:	2301      	movs	r3, #1
    1772:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    1774:	b30d      	cbz	r5, 17ba <yield+0xaa>
			firstYield->_prev = nullptr;
    1776:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1778:	b901      	cbnz	r1, 177c <yield+0x6c>
    177a:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    177c:	2500      	movs	r5, #0
    177e:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    1780:	6883      	ldr	r3, [r0, #8]
    1782:	4798      	blx	r3
		runningFromYield = false;
    1784:	7025      	strb	r5, [r4, #0]
    1786:	e7c7      	b.n	1718 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
    1788:	f000 f928 	bl	19dc <serialEvent6()>
    178c:	e7df      	b.n	174e <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
    178e:	f000 f923 	bl	19d8 <serialEvent5()>
    1792:	e7d9      	b.n	1748 <yield+0x38>
#endif
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
    1794:	f000 f91e 	bl	19d4 <serialEvent4()>
    1798:	e7d3      	b.n	1742 <yield+0x32>
#ifdef USB_TRIPLE_SERIAL
	if (SerialUSB2.available()) serialEventUSB2();
#endif
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    179a:	f000 f919 	bl	19d0 <serialEvent3()>
    179e:	e7cd      	b.n	173c <yield+0x2c>
#endif
#ifdef USB_TRIPLE_SERIAL
	if (SerialUSB2.available()) serialEventUSB2();
#endif
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    17a0:	f000 f914 	bl	19cc <serialEvent2()>
    17a4:	e7c7      	b.n	1736 <yield+0x26>
	if (SerialUSB1.available()) serialEventUSB1();
#endif
#ifdef USB_TRIPLE_SERIAL
	if (SerialUSB2.available()) serialEventUSB2();
#endif
	if (Serial1.available()) serialEvent1();
    17a6:	f000 f90f 	bl	19c8 <serialEvent1()>
    17aa:	e7c0      	b.n	172e <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    17ac:	f7ff ff36 	bl	161c <serialEvent()>
    17b0:	e7b9      	b.n	1726 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    17b2:	2900      	cmp	r1, #0
    17b4:	d1b0      	bne.n	1718 <yield+0x8>
    17b6:	b662      	cpsie	i
    17b8:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    17ba:	4b05      	ldr	r3, [pc, #20]	; (17d0 <yield+0xc0>)
    17bc:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    17be:	2900      	cmp	r1, #0
    17c0:	d1dc      	bne.n	177c <yield+0x6c>
    17c2:	e7da      	b.n	177a <yield+0x6a>
    17c4:	1fff118d 	.word	0x1fff118d
    17c8:	1fff11a0 	.word	0x1fff11a0
    17cc:	1fff11a4 	.word	0x1fff11a4
    17d0:	1fff119c 	.word	0x1fff119c

000017d4 <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    17d4:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    17d6:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    17da:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    17dc:	7f43      	ldrb	r3, [r0, #29]
    17de:	b933      	cbnz	r3, 17ee <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    17e0:	7f01      	ldrb	r1, [r0, #28]
    17e2:	2901      	cmp	r1, #1
    17e4:	d008      	beq.n	17f8 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    17e6:	2903      	cmp	r1, #3
    17e8:	d010      	beq.n	180c <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    17ea:	2301      	movs	r3, #1
    17ec:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    17ee:	b902      	cbnz	r2, 17f2 <EventResponder::triggerEventNotImmediate()+0x1e>
    17f0:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    17f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    17f6:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    17f8:	4c11      	ldr	r4, [pc, #68]	; (1840 <EventResponder::triggerEventNotImmediate()+0x6c>)
    17fa:	6821      	ldr	r1, [r4, #0]
    17fc:	b1a1      	cbz	r1, 1828 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    17fe:	4911      	ldr	r1, [pc, #68]	; (1844 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    1800:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    1802:	680b      	ldr	r3, [r1, #0]
    1804:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    1806:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    1808:	6158      	str	r0, [r3, #20]
    180a:	e7ee      	b.n	17ea <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    180c:	4c0e      	ldr	r4, [pc, #56]	; (1848 <EventResponder::triggerEventNotImmediate()+0x74>)
    180e:	6821      	ldr	r1, [r4, #0]
    1810:	b181      	cbz	r1, 1834 <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    1812:	490e      	ldr	r1, [pc, #56]	; (184c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    1814:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    1816:	680b      	ldr	r3, [r1, #0]
    1818:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    181a:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    181c:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    181e:	4b0c      	ldr	r3, [pc, #48]	; (1850 <EventResponder::triggerEventNotImmediate()+0x7c>)
    1820:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    1824:	6019      	str	r1, [r3, #0]
    1826:	e7e0      	b.n	17ea <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    1828:	4b06      	ldr	r3, [pc, #24]	; (1844 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    182a:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    182c:	6181      	str	r1, [r0, #24]
				firstYield = this;
    182e:	6020      	str	r0, [r4, #0]
				lastYield = this;
    1830:	6018      	str	r0, [r3, #0]
    1832:	e7da      	b.n	17ea <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    1834:	4b05      	ldr	r3, [pc, #20]	; (184c <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    1836:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    1838:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    183a:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    183c:	6018      	str	r0, [r3, #0]
    183e:	e7ee      	b.n	181e <EventResponder::triggerEventNotImmediate()+0x4a>
    1840:	1fff11a0 	.word	0x1fff11a0
    1844:	1fff119c 	.word	0x1fff119c
    1848:	1fff1190 	.word	0x1fff1190
    184c:	1fff1194 	.word	0x1fff1194
    1850:	e000ed04 	.word	0xe000ed04

00001854 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    1854:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1856:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1858:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    185a:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    185c:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    185e:	d003      	beq.n	1868 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    1860:	f85d 4b04 	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    1864:	f7ff bfb6 	b.w	17d4 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    1868:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    186a:	f85d 4b04 	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    186e:	4718      	bx	r3

00001870 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    1870:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1872:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    1876:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    1878:	4c0c      	ldr	r4, [pc, #48]	; (18ac <EventResponder::runFromInterrupt()+0x3c>)
    187a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    187c:	b180      	cbz	r0, 18a0 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    187e:	4e0c      	ldr	r6, [pc, #48]	; (18b0 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    1880:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    1882:	6943      	ldr	r3, [r0, #20]
    1884:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    1886:	b173      	cbz	r3, 18a6 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    1888:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    188a:	b902      	cbnz	r2, 188e <EventResponder::runFromInterrupt()+0x1e>
    188c:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    188e:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    1890:	6883      	ldr	r3, [r0, #8]
    1892:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1894:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    1898:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    189a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    189c:	2800      	cmp	r0, #0
    189e:	d1f0      	bne.n	1882 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    18a0:	b902      	cbnz	r2, 18a4 <EventResponder::runFromInterrupt()+0x34>
    18a2:	b662      	cpsie	i
    18a4:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    18a6:	6033      	str	r3, [r6, #0]
    18a8:	e7ef      	b.n	188a <EventResponder::runFromInterrupt()+0x1a>
    18aa:	bf00      	nop
    18ac:	1fff1190 	.word	0x1fff1190
    18b0:	1fff1194 	.word	0x1fff1194

000018b4 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    18b4:	f7ff bfdc 	b.w	1870 <EventResponder::runFromInterrupt()>

000018b8 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    18b8:	4a18      	ldr	r2, [pc, #96]	; (191c <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    18ba:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    18bc:	6814      	ldr	r4, [r2, #0]
    18be:	2c00      	cmp	r4, #0
    18c0:	d027      	beq.n	1912 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    18c2:	6803      	ldr	r3, [r0, #0]
    18c4:	6821      	ldr	r1, [r4, #0]
    18c6:	428b      	cmp	r3, r1
    18c8:	d20e      	bcs.n	18e8 <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    18ca:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    18cc:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    18ce:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    18d0:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    18d2:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    18d4:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    18d6:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    18d8:	2302      	movs	r3, #2
    18da:	7503      	strb	r3, [r0, #20]
}
    18dc:	bc30      	pop	{r4, r5}
    18de:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    18e0:	6811      	ldr	r1, [r2, #0]
    18e2:	428b      	cmp	r3, r1
    18e4:	4614      	mov	r4, r2
    18e6:	d308      	bcc.n	18fa <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    18e8:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    18ea:	1a5b      	subs	r3, r3, r1
    18ec:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    18ee:	2a00      	cmp	r2, #0
    18f0:	d1f6      	bne.n	18e0 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    18f2:	6082      	str	r2, [r0, #8]
		_prev = timer;
    18f4:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    18f6:	60a0      	str	r0, [r4, #8]
    18f8:	e7ee      	b.n	18d8 <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    18fa:	68d2      	ldr	r2, [r2, #12]
    18fc:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    18fe:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    1900:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    1902:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    1904:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    1906:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    1908:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    190a:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    190c:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    190e:	bc30      	pop	{r4, r5}
    1910:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    1912:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    1914:	60c4      	str	r4, [r0, #12]
		listActive = this;
    1916:	6010      	str	r0, [r2, #0]
    1918:	e7de      	b.n	18d8 <MillisTimer::addToActiveList()+0x20>
    191a:	bf00      	nop
    191c:	1fff1198 	.word	0x1fff1198

00001920 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    1920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    1922:	4e22      	ldr	r6, [pc, #136]	; (19ac <MillisTimer::runFromTimer()+0x8c>)
    1924:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    1926:	b32c      	cbz	r4, 1974 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    1928:	6823      	ldr	r3, [r4, #0]
    192a:	2b00      	cmp	r3, #0
    192c:	d13a      	bne.n	19a4 <MillisTimer::runFromTimer()+0x84>
    192e:	4f20      	ldr	r7, [pc, #128]	; (19b0 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    1930:	461d      	mov	r5, r3
    1932:	e004      	b.n	193e <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    1934:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    1936:	b1ec      	cbz	r4, 1974 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    1938:	6823      	ldr	r3, [r4, #0]
    193a:	2b00      	cmp	r3, #0
    193c:	d132      	bne.n	19a4 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    193e:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    1940:	b103      	cbz	r3, 1944 <MillisTimer::runFromTimer()+0x24>
    1942:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    1944:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    1946:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    1948:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    194a:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    194c:	681b      	ldr	r3, [r3, #0]
    194e:	42bb      	cmp	r3, r7
    1950:	d121      	bne.n	1996 <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    1952:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    1954:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    1956:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    1958:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    195a:	d020      	beq.n	199e <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    195c:	f7ff ff3a 	bl	17d4 <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    1960:	6863      	ldr	r3, [r4, #4]
    1962:	2b00      	cmp	r3, #0
    1964:	d0e6      	beq.n	1934 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    1966:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    1968:	4620      	mov	r0, r4
    196a:	f7ff ffa5 	bl	18b8 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    196e:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    1970:	2c00      	cmp	r4, #0
    1972:	d1e1      	bne.n	1938 <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1974:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    1978:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    197a:	4a0e      	ldr	r2, [pc, #56]	; (19b4 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    197c:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    197e:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    1980:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    1982:	b903      	cbnz	r3, 1986 <MillisTimer::runFromTimer()+0x66>
    1984:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    1986:	b128      	cbz	r0, 1994 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    1988:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    198a:	f7ff ff95 	bl	18b8 <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    198e:	4620      	mov	r0, r4
    1990:	2800      	cmp	r0, #0
    1992:	d1f9      	bne.n	1988 <MillisTimer::runFromTimer()+0x68>
    1994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    1996:	4622      	mov	r2, r4
    1998:	2100      	movs	r1, #0
    199a:	4798      	blx	r3
    199c:	e7e0      	b.n	1960 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    199e:	6883      	ldr	r3, [r0, #8]
    19a0:	4798      	blx	r3
    19a2:	e7dd      	b.n	1960 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    19a4:	3b01      	subs	r3, #1
    19a6:	6023      	str	r3, [r4, #0]
			break;
    19a8:	e7e4      	b.n	1974 <MillisTimer::runFromTimer()+0x54>
    19aa:	bf00      	nop
    19ac:	1fff1198 	.word	0x1fff1198
    19b0:	00001855 	.word	0x00001855
    19b4:	1fff11a8 	.word	0x1fff11a8

000019b8 <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    19b8:	4a02      	ldr	r2, [pc, #8]	; (19c4 <systick_isr+0xc>)
    19ba:	6813      	ldr	r3, [r2, #0]
    19bc:	3301      	adds	r3, #1
    19be:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    19c0:	f7ff bfae 	b.w	1920 <MillisTimer::runFromTimer()>
    19c4:	1fff1000 	.word	0x1fff1000

000019c8 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    19c8:	4770      	bx	lr
    19ca:	bf00      	nop

000019cc <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    19cc:	4770      	bx	lr
    19ce:	bf00      	nop

000019d0 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    19d0:	4770      	bx	lr
    19d2:	bf00      	nop

000019d4 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    19d4:	4770      	bx	lr
    19d6:	bf00      	nop

000019d8 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
    19d8:	4770      	bx	lr
    19da:	bf00      	nop

000019dc <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
    19dc:	4770      	bx	lr
    19de:	bf00      	nop

000019e0 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    19e0:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    19e2:	4829      	ldr	r0, [pc, #164]	; (1a88 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    19e4:	4a29      	ldr	r2, [pc, #164]	; (1a8c <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    19e6:	4b2a      	ldr	r3, [pc, #168]	; (1a90 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    19e8:	4d2a      	ldr	r5, [pc, #168]	; (1a94 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    19ea:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    19ec:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    19ee:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    19f0:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    19f2:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    19f4:	4c28      	ldr	r4, [pc, #160]	; (1a98 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    19f6:	2b08      	cmp	r3, #8
    19f8:	d030      	beq.n	1a5c <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    19fa:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    19fc:	4827      	ldr	r0, [pc, #156]	; (1a9c <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    19fe:	4928      	ldr	r1, [pc, #160]	; (1aa0 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    1a00:	d037      	beq.n	1a72 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    1a02:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    1a04:	bf0c      	ite	eq
    1a06:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1a08:	225d      	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1a0a:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1a0c:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1a0e:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    1a10:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    1a12:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1a14:	4b23      	ldr	r3, [pc, #140]	; (1aa4 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1a16:	4924      	ldr	r1, [pc, #144]	; (1aa8 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1a18:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1a1a:	4a24      	ldr	r2, [pc, #144]	; (1aac <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    1a1c:	b1bb      	cbz	r3, 1a4e <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1a1e:	2301      	movs	r3, #1
    1a20:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    1a22:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1a24:	4b22      	ldr	r3, [pc, #136]	; (1ab0 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1a26:	4923      	ldr	r1, [pc, #140]	; (1ab4 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    1a28:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1a2a:	4a23      	ldr	r2, [pc, #140]	; (1ab8 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    1a2c:	2b01      	cmp	r3, #1
    1a2e:	d926      	bls.n	1a7e <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    1a30:	2b04      	cmp	r3, #4
    1a32:	d90f      	bls.n	1a54 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    1a34:	2b08      	cmp	r3, #8
    1a36:	d91e      	bls.n	1a76 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    1a38:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    1a3a:	bf94      	ite	ls
    1a3c:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1a3e:	2387      	movhi	r3, #135	; 0x87
    1a40:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    1a42:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    1a44:	4b1d      	ldr	r3, [pc, #116]	; (1abc <analog_init+0xdc>)
    1a46:	2201      	movs	r2, #1
    1a48:	701a      	strb	r2, [r3, #0]
}
    1a4a:	bc30      	pop	{r4, r5}
    1a4c:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1a4e:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    1a50:	6013      	str	r3, [r2, #0]
    1a52:	e7e7      	b.n	1a24 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1a54:	2384      	movs	r3, #132	; 0x84
    1a56:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    1a58:	6013      	str	r3, [r2, #0]
    1a5a:	e7f3      	b.n	1a44 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1a5c:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1a60:	490f      	ldr	r1, [pc, #60]	; (1aa0 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1a62:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    1a64:	2221      	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1a66:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1a68:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1a6a:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1a6c:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    1a6e:	600b      	str	r3, [r1, #0]
    1a70:	e7d0      	b.n	1a14 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    1a72:	2239      	movs	r2, #57	; 0x39
    1a74:	e7f7      	b.n	1a66 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1a76:	2385      	movs	r3, #133	; 0x85
    1a78:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    1a7a:	6013      	str	r3, [r2, #0]
    1a7c:	e7e2      	b.n	1a44 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    1a7e:	2380      	movs	r3, #128	; 0x80
    1a80:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    1a82:	6013      	str	r3, [r2, #0]
    1a84:	e7de      	b.n	1a44 <analog_init+0x64>
    1a86:	bf00      	nop
    1a88:	40074000 	.word	0x40074000
    1a8c:	40074001 	.word	0x40074001
    1a90:	1fff0700 	.word	0x1fff0700
    1a94:	4003b008 	.word	0x4003b008
    1a98:	4003b00c 	.word	0x4003b00c
    1a9c:	400bb008 	.word	0x400bb008
    1aa0:	400bb00c 	.word	0x400bb00c
    1aa4:	1fff11ad 	.word	0x1fff11ad
    1aa8:	4003b020 	.word	0x4003b020
    1aac:	400bb020 	.word	0x400bb020
    1ab0:	1fff0701 	.word	0x1fff0701
    1ab4:	4003b024 	.word	0x4003b024
    1ab8:	400bb024 	.word	0x400bb024
    1abc:	1fff11ac 	.word	0x1fff11ac

00001ac0 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1ac0:	4a05      	ldr	r2, [pc, #20]	; (1ad8 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    1ac2:	4b06      	ldr	r3, [pc, #24]	; (1adc <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1ac4:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    1ac6:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1ac8:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    1aca:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    1acc:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    1ace:	bf38      	it	cc
    1ad0:	3040      	addcc	r0, #64	; 0x40
    1ad2:	1ac0      	subs	r0, r0, r3
}
    1ad4:	4770      	bx	lr
    1ad6:	bf00      	nop
    1ad8:	1fff1220 	.word	0x1fff1220
    1adc:	1fff11b5 	.word	0x1fff11b5

00001ae0 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    1ae0:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    1ae2:	4b38      	ldr	r3, [pc, #224]	; (1bc4 <uart1_status_isr+0xe4>)
    1ae4:	791a      	ldrb	r2, [r3, #4]
    1ae6:	f012 0f30 	tst.w	r2, #48	; 0x30
    1aea:	d02c      	beq.n	1b46 <uart1_status_isr+0x66>
		__disable_irq();
    1aec:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    1aee:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    1af0:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    1af4:	2900      	cmp	r1, #0
    1af6:	d03d      	beq.n	1b74 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    1af8:	b662      	cpsie	i
			head = rx_buffer_head;
    1afa:	4f33      	ldr	r7, [pc, #204]	; (1bc8 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    1afc:	4933      	ldr	r1, [pc, #204]	; (1bcc <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    1afe:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    1b00:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    1b02:	4e33      	ldr	r6, [pc, #204]	; (1bd0 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    1b04:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    1b06:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    1b08:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    1b0a:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    1b0c:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    1b0e:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    1b10:	bf28      	it	cs
    1b12:	2300      	movcs	r3, #0
				if (newhead != tail) {
    1b14:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    1b16:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    1b1a:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    1b1c:	bf1c      	itt	ne
    1b1e:	54f1      	strbne	r1, [r6, r3]
    1b20:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    1b22:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    1b26:	d1f0      	bne.n	1b0a <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    1b28:	4b2a      	ldr	r3, [pc, #168]	; (1bd4 <uart1_status_isr+0xf4>)
    1b2a:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    1b2c:	b2c2      	uxtb	r2, r0
    1b2e:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    1b30:	b14b      	cbz	r3, 1b46 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    1b32:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    1b34:	bf36      	itet	cc
    1b36:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    1b3a:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    1b3c:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    1b3e:	2827      	cmp	r0, #39	; 0x27
    1b40:	bfc4      	itt	gt
    1b42:	2201      	movgt	r2, #1
    1b44:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    1b46:	491f      	ldr	r1, [pc, #124]	; (1bc4 <uart1_status_isr+0xe4>)
    1b48:	78ca      	ldrb	r2, [r1, #3]
    1b4a:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    1b4c:	0615      	lsls	r5, r2, #24
    1b4e:	d416      	bmi.n	1b7e <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    1b50:	0652      	lsls	r2, r2, #25
    1b52:	d50d      	bpl.n	1b70 <uart1_status_isr+0x90>
    1b54:	4b1b      	ldr	r3, [pc, #108]	; (1bc4 <uart1_status_isr+0xe4>)
    1b56:	791b      	ldrb	r3, [r3, #4]
    1b58:	065b      	lsls	r3, r3, #25
    1b5a:	d509      	bpl.n	1b70 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    1b5c:	4b1e      	ldr	r3, [pc, #120]	; (1bd8 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    1b5e:	491f      	ldr	r1, [pc, #124]	; (1bdc <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    1b60:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    1b62:	2200      	movs	r2, #0
    1b64:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    1b66:	b103      	cbz	r3, 1b6a <uart1_status_isr+0x8a>
    1b68:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    1b6a:	4b16      	ldr	r3, [pc, #88]	; (1bc4 <uart1_status_isr+0xe4>)
    1b6c:	223c      	movs	r2, #60	; 0x3c
    1b6e:	70da      	strb	r2, [r3, #3]
	}
}
    1b70:	bcf0      	pop	{r4, r5, r6, r7}
    1b72:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    1b74:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    1b76:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    1b78:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    1b7a:	b662      	cpsie	i
    1b7c:	e7e3      	b.n	1b46 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    1b7e:	790b      	ldrb	r3, [r1, #4]
    1b80:	061c      	lsls	r4, r3, #24
    1b82:	d5e5      	bpl.n	1b50 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    1b84:	4b16      	ldr	r3, [pc, #88]	; (1be0 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    1b86:	4e17      	ldr	r6, [pc, #92]	; (1be4 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    1b88:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    1b8a:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    1b8c:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    1b8e:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    1b90:	429c      	cmp	r4, r3
    1b92:	d00e      	beq.n	1bb2 <uart1_status_isr+0xd2>
    1b94:	4d14      	ldr	r5, [pc, #80]	; (1be8 <uart1_status_isr+0x108>)
    1b96:	e001      	b.n	1b9c <uart1_status_isr+0xbc>
    1b98:	42a3      	cmp	r3, r4
    1b9a:	d00a      	beq.n	1bb2 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    1b9c:	3301      	adds	r3, #1
    1b9e:	2b28      	cmp	r3, #40	; 0x28
    1ba0:	bf28      	it	cs
    1ba2:	2300      	movcs	r3, #0
			avail = UART1_S1;
    1ba4:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    1ba6:	5ce8      	ldrb	r0, [r5, r3]
    1ba8:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    1baa:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    1bac:	7d08      	ldrb	r0, [r1, #20]
    1bae:	2807      	cmp	r0, #7
    1bb0:	d9f2      	bls.n	1b98 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    1bb2:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    1bb4:	4903      	ldr	r1, [pc, #12]	; (1bc4 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    1bb6:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    1bb8:	790b      	ldrb	r3, [r1, #4]
    1bba:	0618      	lsls	r0, r3, #24
    1bbc:	bf44      	itt	mi
    1bbe:	237c      	movmi	r3, #124	; 0x7c
    1bc0:	70cb      	strbmi	r3, [r1, #3]
    1bc2:	e7c5      	b.n	1b50 <uart1_status_isr+0x70>
    1bc4:	4006b000 	.word	0x4006b000
    1bc8:	1fff1220 	.word	0x1fff1220
    1bcc:	1fff11b5 	.word	0x1fff11b5
    1bd0:	1fff11e0 	.word	0x1fff11e0
    1bd4:	1fff11b0 	.word	0x1fff11b0
    1bd8:	1fff1224 	.word	0x1fff1224
    1bdc:	1fff11b4 	.word	0x1fff11b4
    1be0:	1fff1228 	.word	0x1fff1228
    1be4:	1fff1221 	.word	0x1fff1221
    1be8:	1fff11b8 	.word	0x1fff11b8

00001bec <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1bec:	4a05      	ldr	r2, [pc, #20]	; (1c04 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    1bee:	4b06      	ldr	r3, [pc, #24]	; (1c08 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1bf0:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    1bf2:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1bf4:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    1bf6:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    1bf8:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    1bfa:	bf38      	it	cc
    1bfc:	3040      	addcc	r0, #64	; 0x40
    1bfe:	1ac0      	subs	r0, r0, r3
}
    1c00:	4770      	bx	lr
    1c02:	bf00      	nop
    1c04:	1fff1230 	.word	0x1fff1230
    1c08:	1fff1231 	.word	0x1fff1231

00001c0c <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    1c0c:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    1c0e:	4b2b      	ldr	r3, [pc, #172]	; (1cbc <uart2_status_isr+0xb0>)
    1c10:	791a      	ldrb	r2, [r3, #4]
    1c12:	0694      	lsls	r4, r2, #26
    1c14:	d51f      	bpl.n	1c56 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    1c16:	482a      	ldr	r0, [pc, #168]	; (1cc0 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    1c18:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    1c1a:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    1c1c:	4929      	ldr	r1, [pc, #164]	; (1cc4 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    1c1e:	3301      	adds	r3, #1
    1c20:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    1c22:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    1c24:	bfc8      	it	gt
    1c26:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    1c28:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    1c2a:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    1c2c:	d003      	beq.n	1c36 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    1c2e:	4c26      	ldr	r4, [pc, #152]	; (1cc8 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    1c30:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    1c32:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    1c34:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    1c36:	4a25      	ldr	r2, [pc, #148]	; (1ccc <uart2_status_isr+0xc0>)
    1c38:	6811      	ldr	r1, [r2, #0]
    1c3a:	b161      	cbz	r1, 1c56 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    1c3c:	4a24      	ldr	r2, [pc, #144]	; (1cd0 <uart2_status_isr+0xc4>)
    1c3e:	7812      	ldrb	r2, [r2, #0]
    1c40:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    1c42:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    1c44:	bf36      	itet	cc
    1c46:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    1c4a:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    1c4c:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    1c4e:	2b27      	cmp	r3, #39	; 0x27
    1c50:	bfc4      	itt	gt
    1c52:	2301      	movgt	r3, #1
    1c54:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    1c56:	4a19      	ldr	r2, [pc, #100]	; (1cbc <uart2_status_isr+0xb0>)
    1c58:	78d3      	ldrb	r3, [r2, #3]
    1c5a:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    1c5c:	0618      	lsls	r0, r3, #24
    1c5e:	d411      	bmi.n	1c84 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    1c60:	065a      	lsls	r2, r3, #25
    1c62:	d50d      	bpl.n	1c80 <uart2_status_isr+0x74>
    1c64:	4b15      	ldr	r3, [pc, #84]	; (1cbc <uart2_status_isr+0xb0>)
    1c66:	791b      	ldrb	r3, [r3, #4]
    1c68:	065b      	lsls	r3, r3, #25
    1c6a:	d509      	bpl.n	1c80 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    1c6c:	4b19      	ldr	r3, [pc, #100]	; (1cd4 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    1c6e:	491a      	ldr	r1, [pc, #104]	; (1cd8 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    1c70:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    1c72:	2200      	movs	r2, #0
    1c74:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    1c76:	b103      	cbz	r3, 1c7a <uart2_status_isr+0x6e>
    1c78:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    1c7a:	4b10      	ldr	r3, [pc, #64]	; (1cbc <uart2_status_isr+0xb0>)
    1c7c:	222c      	movs	r2, #44	; 0x2c
    1c7e:	70da      	strb	r2, [r3, #3]
	}
}
    1c80:	bc30      	pop	{r4, r5}
    1c82:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    1c84:	7911      	ldrb	r1, [r2, #4]
    1c86:	0609      	lsls	r1, r1, #24
    1c88:	d5ea      	bpl.n	1c60 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    1c8a:	4914      	ldr	r1, [pc, #80]	; (1cdc <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    1c8c:	4810      	ldr	r0, [pc, #64]	; (1cd0 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    1c8e:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    1c90:	7801      	ldrb	r1, [r0, #0]
    1c92:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    1c94:	428c      	cmp	r4, r1
    1c96:	d00d      	beq.n	1cb4 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    1c98:	1c4a      	adds	r2, r1, #1
    1c9a:	2a27      	cmp	r2, #39	; 0x27
    1c9c:	bf84      	itt	hi
    1c9e:	2100      	movhi	r1, #0
    1ca0:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    1ca2:	4d0f      	ldr	r5, [pc, #60]	; (1ce0 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    1ca4:	4c05      	ldr	r4, [pc, #20]	; (1cbc <uart2_status_isr+0xb0>)
    1ca6:	bf98      	it	ls
    1ca8:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    1caa:	5caa      	ldrb	r2, [r5, r2]
    1cac:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    1cae:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    1cb0:	7001      	strb	r1, [r0, #0]
    1cb2:	e7d5      	b.n	1c60 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    1cb4:	216c      	movs	r1, #108	; 0x6c
    1cb6:	70d1      	strb	r1, [r2, #3]
    1cb8:	e7d2      	b.n	1c60 <uart2_status_isr+0x54>
    1cba:	bf00      	nop
    1cbc:	4006c000 	.word	0x4006c000
    1cc0:	1fff1230 	.word	0x1fff1230
    1cc4:	1fff1231 	.word	0x1fff1231
    1cc8:	1fff125c 	.word	0x1fff125c
    1ccc:	1fff122c 	.word	0x1fff122c
    1cd0:	1fff129d 	.word	0x1fff129d
    1cd4:	1fff12a0 	.word	0x1fff12a0
    1cd8:	1fff129c 	.word	0x1fff129c
    1cdc:	1fff12a4 	.word	0x1fff12a4
    1ce0:	1fff1234 	.word	0x1fff1234

00001ce4 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1ce4:	4a05      	ldr	r2, [pc, #20]	; (1cfc <serial4_available+0x18>)
	tail = rx_buffer_tail;
    1ce6:	4b06      	ldr	r3, [pc, #24]	; (1d00 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1ce8:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    1cea:	781b      	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1cec:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    1cee:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    1cf0:	4298      	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    1cf2:	bf38      	it	cc
    1cf4:	3040      	addcc	r0, #64	; 0x40
    1cf6:	1ac0      	subs	r0, r0, r3
}
    1cf8:	4770      	bx	lr
    1cfa:	bf00      	nop
    1cfc:	1fff12ac 	.word	0x1fff12ac
    1d00:	1fff12ad 	.word	0x1fff12ad

00001d04 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    1d04:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    1d06:	4b2b      	ldr	r3, [pc, #172]	; (1db4 <uart3_status_isr+0xb0>)
    1d08:	791a      	ldrb	r2, [r3, #4]
    1d0a:	0694      	lsls	r4, r2, #26
    1d0c:	d51f      	bpl.n	1d4e <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    1d0e:	482a      	ldr	r0, [pc, #168]	; (1db8 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    1d10:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    1d12:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    1d14:	4929      	ldr	r1, [pc, #164]	; (1dbc <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    1d16:	3301      	adds	r3, #1
    1d18:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    1d1a:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    1d1c:	bfc8      	it	gt
    1d1e:	2300      	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    1d20:	428b      	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    1d22:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    1d24:	d003      	beq.n	1d2e <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    1d26:	4c26      	ldr	r4, [pc, #152]	; (1dc0 <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    1d28:	b2d9      	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    1d2a:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    1d2c:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    1d2e:	4a25      	ldr	r2, [pc, #148]	; (1dc4 <uart3_status_isr+0xc0>)
    1d30:	6811      	ldr	r1, [r2, #0]
    1d32:	b161      	cbz	r1, 1d4e <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    1d34:	4a24      	ldr	r2, [pc, #144]	; (1dc8 <uart3_status_isr+0xc4>)
    1d36:	7812      	ldrb	r2, [r2, #0]
    1d38:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    1d3a:	4293      	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    1d3c:	bf36      	itet	cc
    1d3e:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    1d42:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    1d44:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    1d46:	2b27      	cmp	r3, #39	; 0x27
    1d48:	bfc4      	itt	gt
    1d4a:	2301      	movgt	r3, #1
    1d4c:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    1d4e:	4a19      	ldr	r2, [pc, #100]	; (1db4 <uart3_status_isr+0xb0>)
    1d50:	78d3      	ldrb	r3, [r2, #3]
    1d52:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    1d54:	0618      	lsls	r0, r3, #24
    1d56:	d411      	bmi.n	1d7c <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    1d58:	065a      	lsls	r2, r3, #25
    1d5a:	d50d      	bpl.n	1d78 <uart3_status_isr+0x74>
    1d5c:	4b15      	ldr	r3, [pc, #84]	; (1db4 <uart3_status_isr+0xb0>)
    1d5e:	791b      	ldrb	r3, [r3, #4]
    1d60:	065b      	lsls	r3, r3, #25
    1d62:	d509      	bpl.n	1d78 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    1d64:	4b19      	ldr	r3, [pc, #100]	; (1dcc <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    1d66:	491a      	ldr	r1, [pc, #104]	; (1dd0 <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    1d68:	681b      	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    1d6a:	2200      	movs	r2, #0
    1d6c:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    1d6e:	b103      	cbz	r3, 1d72 <uart3_status_isr+0x6e>
    1d70:	701a      	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    1d72:	4b10      	ldr	r3, [pc, #64]	; (1db4 <uart3_status_isr+0xb0>)
    1d74:	222c      	movs	r2, #44	; 0x2c
    1d76:	70da      	strb	r2, [r3, #3]
	}
}
    1d78:	bc30      	pop	{r4, r5}
    1d7a:	4770      	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    1d7c:	7911      	ldrb	r1, [r2, #4]
    1d7e:	0609      	lsls	r1, r1, #24
    1d80:	d5ea      	bpl.n	1d58 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    1d82:	4914      	ldr	r1, [pc, #80]	; (1dd4 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    1d84:	4810      	ldr	r0, [pc, #64]	; (1dc8 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    1d86:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    1d88:	7801      	ldrb	r1, [r0, #0]
    1d8a:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    1d8c:	428c      	cmp	r4, r1
    1d8e:	d00d      	beq.n	1dac <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    1d90:	1c4a      	adds	r2, r1, #1
    1d92:	2a27      	cmp	r2, #39	; 0x27
    1d94:	bf84      	itt	hi
    1d96:	2100      	movhi	r1, #0
    1d98:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    1d9a:	4d0f      	ldr	r5, [pc, #60]	; (1dd8 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    1d9c:	4c05      	ldr	r4, [pc, #20]	; (1db4 <uart3_status_isr+0xb0>)
    1d9e:	bf98      	it	ls
    1da0:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    1da2:	5caa      	ldrb	r2, [r5, r2]
    1da4:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    1da6:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    1da8:	7001      	strb	r1, [r0, #0]
    1daa:	e7d5      	b.n	1d58 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    1dac:	216c      	movs	r1, #108	; 0x6c
    1dae:	70d1      	strb	r1, [r2, #3]
    1db0:	e7d2      	b.n	1d58 <uart3_status_isr+0x54>
    1db2:	bf00      	nop
    1db4:	4006d000 	.word	0x4006d000
    1db8:	1fff12ac 	.word	0x1fff12ac
    1dbc:	1fff12ad 	.word	0x1fff12ad
    1dc0:	1fff12d8 	.word	0x1fff12d8
    1dc4:	1fff12a8 	.word	0x1fff12a8
    1dc8:	1fff1319 	.word	0x1fff1319
    1dcc:	1fff131c 	.word	0x1fff131c
    1dd0:	1fff1318 	.word	0x1fff1318
    1dd4:	1fff1320 	.word	0x1fff1320
    1dd8:	1fff12b0 	.word	0x1fff12b0

00001ddc <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1ddc:	4a05      	ldr	r2, [pc, #20]	; (1df4 <serial5_available+0x18>)
	tail = rx_buffer_tail;
    1dde:	4b06      	ldr	r3, [pc, #24]	; (1df8 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1de0:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    1de2:	781b      	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1de4:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    1de6:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    1de8:	4298      	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
    1dea:	bf38      	it	cc
    1dec:	3040      	addcc	r0, #64	; 0x40
    1dee:	1ac0      	subs	r0, r0, r3
}
    1df0:	4770      	bx	lr
    1df2:	bf00      	nop
    1df4:	1fff1328 	.word	0x1fff1328
    1df8:	1fff1329 	.word	0x1fff1329

00001dfc <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
    1dfc:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
    1dfe:	4b2b      	ldr	r3, [pc, #172]	; (1eac <uart4_status_isr+0xb0>)
    1e00:	791a      	ldrb	r2, [r3, #4]
    1e02:	0694      	lsls	r4, r2, #26
    1e04:	d51f      	bpl.n	1e46 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    1e06:	482a      	ldr	r0, [pc, #168]	; (1eb0 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    1e08:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    1e0a:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    1e0c:	4929      	ldr	r1, [pc, #164]	; (1eb4 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    1e0e:	3301      	adds	r3, #1
    1e10:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    1e12:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
    1e14:	bfc8      	it	gt
    1e16:	2300      	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    1e18:	428b      	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
    1e1a:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    1e1c:	d003      	beq.n	1e26 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
    1e1e:	4c26      	ldr	r4, [pc, #152]	; (1eb8 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
    1e20:	b2d9      	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    1e22:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    1e24:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    1e26:	4a25      	ldr	r2, [pc, #148]	; (1ebc <uart4_status_isr+0xc0>)
    1e28:	6811      	ldr	r1, [r2, #0]
    1e2a:	b161      	cbz	r1, 1e46 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    1e2c:	4a24      	ldr	r2, [pc, #144]	; (1ec0 <uart4_status_isr+0xc4>)
    1e2e:	7812      	ldrb	r2, [r2, #0]
    1e30:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    1e32:	4293      	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    1e34:	bf36      	itet	cc
    1e36:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    1e3a:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
    1e3c:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    1e3e:	2b27      	cmp	r3, #39	; 0x27
    1e40:	bfc4      	itt	gt
    1e42:	2301      	movgt	r3, #1
    1e44:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
    1e46:	4a19      	ldr	r2, [pc, #100]	; (1eac <uart4_status_isr+0xb0>)
    1e48:	78d3      	ldrb	r3, [r2, #3]
    1e4a:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    1e4c:	0618      	lsls	r0, r3, #24
    1e4e:	d411      	bmi.n	1e74 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
    1e50:	065a      	lsls	r2, r3, #25
    1e52:	d50d      	bpl.n	1e70 <uart4_status_isr+0x74>
    1e54:	4b15      	ldr	r3, [pc, #84]	; (1eac <uart4_status_isr+0xb0>)
    1e56:	791b      	ldrb	r3, [r3, #4]
    1e58:	065b      	lsls	r3, r3, #25
    1e5a:	d509      	bpl.n	1e70 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    1e5c:	4b19      	ldr	r3, [pc, #100]	; (1ec4 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    1e5e:	491a      	ldr	r1, [pc, #104]	; (1ec8 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    1e60:	681b      	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
    1e62:	2200      	movs	r2, #0
    1e64:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    1e66:	b103      	cbz	r3, 1e6a <uart4_status_isr+0x6e>
    1e68:	701a      	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
    1e6a:	4b10      	ldr	r3, [pc, #64]	; (1eac <uart4_status_isr+0xb0>)
    1e6c:	222c      	movs	r2, #44	; 0x2c
    1e6e:	70da      	strb	r2, [r3, #3]
	}
}
    1e70:	bc30      	pop	{r4, r5}
    1e72:	4770      	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
    1e74:	7911      	ldrb	r1, [r2, #4]
    1e76:	0609      	lsls	r1, r1, #24
    1e78:	d5ea      	bpl.n	1e50 <uart4_status_isr+0x54>
		head = tx_buffer_head;
    1e7a:	4914      	ldr	r1, [pc, #80]	; (1ecc <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
    1e7c:	4810      	ldr	r0, [pc, #64]	; (1ec0 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    1e7e:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    1e80:	7801      	ldrb	r1, [r0, #0]
    1e82:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    1e84:	428c      	cmp	r4, r1
    1e86:	d00d      	beq.n	1ea4 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
    1e88:	1c4a      	adds	r2, r1, #1
    1e8a:	2a27      	cmp	r2, #39	; 0x27
    1e8c:	bf84      	itt	hi
    1e8e:	2100      	movhi	r1, #0
    1e90:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    1e92:	4d0f      	ldr	r5, [pc, #60]	; (1ed0 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    1e94:	4c05      	ldr	r4, [pc, #20]	; (1eac <uart4_status_isr+0xb0>)
    1e96:	bf98      	it	ls
    1e98:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    1e9a:	5caa      	ldrb	r2, [r5, r2]
    1e9c:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
    1e9e:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    1ea0:	7001      	strb	r1, [r0, #0]
    1ea2:	e7d5      	b.n	1e50 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
    1ea4:	216c      	movs	r1, #108	; 0x6c
    1ea6:	70d1      	strb	r1, [r2, #3]
    1ea8:	e7d2      	b.n	1e50 <uart4_status_isr+0x54>
    1eaa:	bf00      	nop
    1eac:	400ea000 	.word	0x400ea000
    1eb0:	1fff1328 	.word	0x1fff1328
    1eb4:	1fff1329 	.word	0x1fff1329
    1eb8:	1fff1354 	.word	0x1fff1354
    1ebc:	1fff1324 	.word	0x1fff1324
    1ec0:	1fff1395 	.word	0x1fff1395
    1ec4:	1fff1398 	.word	0x1fff1398
    1ec8:	1fff1394 	.word	0x1fff1394
    1ecc:	1fff139c 	.word	0x1fff139c
    1ed0:	1fff132c 	.word	0x1fff132c

00001ed4 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1ed4:	4a05      	ldr	r2, [pc, #20]	; (1eec <serial6_available+0x18>)
	tail = rx_buffer_tail;
    1ed6:	4b06      	ldr	r3, [pc, #24]	; (1ef0 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1ed8:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    1eda:	781b      	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    1edc:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    1ede:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    1ee0:	4298      	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
    1ee2:	bf38      	it	cc
    1ee4:	3040      	addcc	r0, #64	; 0x40
    1ee6:	1ac0      	subs	r0, r0, r3
}
    1ee8:	4770      	bx	lr
    1eea:	bf00      	nop
    1eec:	1fff13a4 	.word	0x1fff13a4
    1ef0:	1fff13a5 	.word	0x1fff13a5

00001ef4 <uart5_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart5_status_isr(void)
{
    1ef4:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART5_S1 & UART_S1_RDRF) {
    1ef6:	4b2b      	ldr	r3, [pc, #172]	; (1fa4 <uart5_status_isr+0xb0>)
    1ef8:	791a      	ldrb	r2, [r3, #4]
    1efa:	0694      	lsls	r4, r2, #26
    1efc:	d51f      	bpl.n	1f3e <uart5_status_isr+0x4a>
		if (use9Bits && (UART5_C3 & 0x80)) {
			n = UART5_D | 0x100;
		} else {
			n = UART5_D;
		}
		head = rx_buffer_head + 1;
    1efe:	482a      	ldr	r0, [pc, #168]	; (1fa8 <uart5_status_isr+0xb4>)

	if (UART5_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART5_C3 & 0x80)) {
			n = UART5_D | 0x100;
		} else {
			n = UART5_D;
    1f00:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    1f02:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    1f04:	4929      	ldr	r1, [pc, #164]	; (1fac <uart5_status_isr+0xb8>)
		if (use9Bits && (UART5_C3 & 0x80)) {
			n = UART5_D | 0x100;
		} else {
			n = UART5_D;
		}
		head = rx_buffer_head + 1;
    1f06:	3301      	adds	r3, #1
    1f08:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    1f0a:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART5_C3 & 0x80)) {
			n = UART5_D | 0x100;
		} else {
			n = UART5_D;
		}
		head = rx_buffer_head + 1;
    1f0c:	bfc8      	it	gt
    1f0e:	2300      	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    1f10:	428b      	cmp	r3, r1

	if (UART5_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART5_C3 & 0x80)) {
			n = UART5_D | 0x100;
		} else {
			n = UART5_D;
    1f12:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    1f14:	d003      	beq.n	1f1e <uart5_status_isr+0x2a>
			rx_buffer[head] = n;
    1f16:	4c26      	ldr	r4, [pc, #152]	; (1fb0 <uart5_status_isr+0xbc>)
			rx_buffer_head = head;
    1f18:	b2d9      	uxtb	r1, r3
			n = UART5_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    1f1a:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    1f1c:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    1f1e:	4a25      	ldr	r2, [pc, #148]	; (1fb4 <uart5_status_isr+0xc0>)
    1f20:	6811      	ldr	r1, [r2, #0]
    1f22:	b161      	cbz	r1, 1f3e <uart5_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    1f24:	4a24      	ldr	r2, [pc, #144]	; (1fb8 <uart5_status_isr+0xc4>)
    1f26:	7812      	ldrb	r2, [r2, #0]
    1f28:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    1f2a:	4293      	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    1f2c:	bf36      	itet	cc
    1f2e:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    1f32:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
    1f34:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    1f36:	2b27      	cmp	r3, #39	; 0x27
    1f38:	bfc4      	itt	gt
    1f3a:	2301      	movgt	r3, #1
    1f3c:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART5_C2;
    1f3e:	4a19      	ldr	r2, [pc, #100]	; (1fa4 <uart5_status_isr+0xb0>)
    1f40:	78d3      	ldrb	r3, [r2, #3]
    1f42:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART5_S1 & UART_S1_TDRE)) {
    1f44:	0618      	lsls	r0, r3, #24
    1f46:	d411      	bmi.n	1f6c <uart5_status_isr+0x78>
			if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART5_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART5_S1 & UART_S1_TC)) {
    1f48:	065a      	lsls	r2, r3, #25
    1f4a:	d50d      	bpl.n	1f68 <uart5_status_isr+0x74>
    1f4c:	4b15      	ldr	r3, [pc, #84]	; (1fa4 <uart5_status_isr+0xb0>)
    1f4e:	791b      	ldrb	r3, [r3, #4]
    1f50:	065b      	lsls	r3, r3, #25
    1f52:	d509      	bpl.n	1f68 <uart5_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    1f54:	4b19      	ldr	r3, [pc, #100]	; (1fbc <uart5_status_isr+0xc8>)
			UART5_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART5_S1 & UART_S1_TC)) {
		transmitting = 0;
    1f56:	491a      	ldr	r1, [pc, #104]	; (1fc0 <uart5_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    1f58:	681b      	ldr	r3, [r3, #0]
			UART5_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART5_S1 & UART_S1_TC)) {
		transmitting = 0;
    1f5a:	2200      	movs	r2, #0
    1f5c:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    1f5e:	b103      	cbz	r3, 1f62 <uart5_status_isr+0x6e>
    1f60:	701a      	strb	r2, [r3, #0]
		UART5_C2 = C2_TX_INACTIVE;
    1f62:	4b10      	ldr	r3, [pc, #64]	; (1fa4 <uart5_status_isr+0xb0>)
    1f64:	222c      	movs	r2, #44	; 0x2c
    1f66:	70da      	strb	r2, [r3, #3]
	}
}
    1f68:	bc30      	pop	{r4, r5}
    1f6a:	4770      	bx	lr
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART5_C2;
	if ((c & UART_C2_TIE) && (UART5_S1 & UART_S1_TDRE)) {
    1f6c:	7911      	ldrb	r1, [r2, #4]
    1f6e:	0609      	lsls	r1, r1, #24
    1f70:	d5ea      	bpl.n	1f48 <uart5_status_isr+0x54>
		head = tx_buffer_head;
    1f72:	4914      	ldr	r1, [pc, #80]	; (1fc4 <uart5_status_isr+0xd0>)
		tail = tx_buffer_tail;
    1f74:	4810      	ldr	r0, [pc, #64]	; (1fb8 <uart5_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART5_C2;
	if ((c & UART_C2_TIE) && (UART5_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    1f76:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    1f78:	7801      	ldrb	r1, [r0, #0]
    1f7a:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    1f7c:	428c      	cmp	r4, r1
    1f7e:	d00d      	beq.n	1f9c <uart5_status_isr+0xa8>
			UART5_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
    1f80:	1c4a      	adds	r2, r1, #1
    1f82:	2a27      	cmp	r2, #39	; 0x27
    1f84:	bf84      	itt	hi
    1f86:	2100      	movhi	r1, #0
    1f88:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    1f8a:	4d0f      	ldr	r5, [pc, #60]	; (1fc8 <uart5_status_isr+0xd4>)
			if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART5_D = n;
    1f8c:	4c05      	ldr	r4, [pc, #20]	; (1fa4 <uart5_status_isr+0xb0>)
    1f8e:	bf98      	it	ls
    1f90:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART5_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    1f92:	5caa      	ldrb	r2, [r5, r2]
    1f94:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART5_D = n;
    1f96:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    1f98:	7001      	strb	r1, [r0, #0]
    1f9a:	e7d5      	b.n	1f48 <uart5_status_isr+0x54>
	c = UART5_C2;
	if ((c & UART_C2_TIE) && (UART5_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART5_C2 = C2_TX_COMPLETING;
    1f9c:	216c      	movs	r1, #108	; 0x6c
    1f9e:	70d1      	strb	r1, [r2, #3]
    1fa0:	e7d2      	b.n	1f48 <uart5_status_isr+0x54>
    1fa2:	bf00      	nop
    1fa4:	400eb000 	.word	0x400eb000
    1fa8:	1fff13a4 	.word	0x1fff13a4
    1fac:	1fff13a5 	.word	0x1fff13a5
    1fb0:	1fff13d0 	.word	0x1fff13d0
    1fb4:	1fff13a0 	.word	0x1fff13a0
    1fb8:	1fff1411 	.word	0x1fff1411
    1fbc:	1fff1414 	.word	0x1fff1414
    1fc0:	1fff1410 	.word	0x1fff1410
    1fc4:	1fff1418 	.word	0x1fff1418
    1fc8:	1fff13a8 	.word	0x1fff13a8

00001fcc <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    1fcc:	b672      	cpsid	i
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    1fce:	4a18      	ldr	r2, [pc, #96]	; (2030 <usb_init_serialnumber+0x64>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    1fd0:	4b18      	ldr	r3, [pc, #96]	; (2034 <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    1fd2:	4919      	ldr	r1, [pc, #100]	; (2038 <usb_init_serialnumber+0x6c>)
    1fd4:	6011      	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    1fd6:	2270      	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    1fd8:	2180      	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    1fda:	701a      	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    1fdc:	461a      	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    1fde:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    1fe0:	7813      	ldrb	r3, [r2, #0]
    1fe2:	061b      	lsls	r3, r3, #24
    1fe4:	d5fc      	bpl.n	1fe0 <usb_init_serialnumber+0x14>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    1fe6:	b510      	push	{r4, lr}
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    1fe8:	4b14      	ldr	r3, [pc, #80]	; (203c <usb_init_serialnumber+0x70>)
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    1fea:	b084      	sub	sp, #16
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
    1fec:	6818      	ldr	r0, [r3, #0]
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    1fee:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1ff0:	4b13      	ldr	r3, [pc, #76]	; (2040 <usb_init_serialnumber+0x74>)
    1ff2:	4c14      	ldr	r4, [pc, #80]	; (2044 <usb_init_serialnumber+0x78>)
    1ff4:	4298      	cmp	r0, r3
    1ff6:	bf98      	it	ls
    1ff8:	eb00 0080 	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    1ffc:	a901      	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1ffe:	bf98      	it	ls
    2000:	0040      	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    2002:	220a      	movs	r2, #10
    2004:	f7fe fa92 	bl	52c <ultoa>
    2008:	a901      	add	r1, sp, #4
    200a:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    200c:	2300      	movs	r3, #0
		char c = buf[i];
    200e:	f811 2b01 	ldrb.w	r2, [r1], #1
    2012:	3301      	adds	r3, #1
		if (!c) break;
    2014:	b13a      	cbz	r2, 2026 <usb_init_serialnumber+0x5a>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    2016:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    2018:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    201c:	d1f7      	bne.n	200e <usb_init_serialnumber+0x42>
    201e:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    2020:	7023      	strb	r3, [r4, #0]
}
    2022:	b004      	add	sp, #16
    2024:	bd10      	pop	{r4, pc}
    2026:	005b      	lsls	r3, r3, #1
    2028:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    202a:	7023      	strb	r3, [r4, #0]
}
    202c:	b004      	add	sp, #16
    202e:	bd10      	pop	{r4, pc}
    2030:	40020004 	.word	0x40020004
    2034:	40020000 	.word	0x40020000
    2038:	41070000 	.word	0x41070000
    203c:	4002000c 	.word	0x4002000c
    2040:	0098967f 	.word	0x0098967f
    2044:	1fff0790 	.word	0x1fff0790

00002048 <__errno>:
    2048:	4b01      	ldr	r3, [pc, #4]	; (2050 <__errno+0x8>)
    204a:	6818      	ldr	r0, [r3, #0]
    204c:	4770      	bx	lr
    204e:	bf00      	nop
    2050:	1fff0bd0 	.word	0x1fff0bd0

00002054 <__libc_init_array>:
    2054:	b570      	push	{r4, r5, r6, lr}
    2056:	4e0f      	ldr	r6, [pc, #60]	; (2094 <__libc_init_array+0x40>)
    2058:	4d0f      	ldr	r5, [pc, #60]	; (2098 <__libc_init_array+0x44>)
    205a:	1b76      	subs	r6, r6, r5
    205c:	10b6      	asrs	r6, r6, #2
    205e:	bf18      	it	ne
    2060:	2400      	movne	r4, #0
    2062:	d005      	beq.n	2070 <__libc_init_array+0x1c>
    2064:	3401      	adds	r4, #1
    2066:	f855 3b04 	ldr.w	r3, [r5], #4
    206a:	4798      	blx	r3
    206c:	42a6      	cmp	r6, r4
    206e:	d1f9      	bne.n	2064 <__libc_init_array+0x10>
    2070:	4e0a      	ldr	r6, [pc, #40]	; (209c <__libc_init_array+0x48>)
    2072:	4d0b      	ldr	r5, [pc, #44]	; (20a0 <__libc_init_array+0x4c>)
    2074:	1b76      	subs	r6, r6, r5
    2076:	f000 fdc5 	bl	2c04 <_init>
    207a:	10b6      	asrs	r6, r6, #2
    207c:	bf18      	it	ne
    207e:	2400      	movne	r4, #0
    2080:	d006      	beq.n	2090 <__libc_init_array+0x3c>
    2082:	3401      	adds	r4, #1
    2084:	f855 3b04 	ldr.w	r3, [r5], #4
    2088:	4798      	blx	r3
    208a:	42a6      	cmp	r6, r4
    208c:	d1f9      	bne.n	2082 <__libc_init_array+0x2e>
    208e:	bd70      	pop	{r4, r5, r6, pc}
    2090:	bd70      	pop	{r4, r5, r6, pc}
    2092:	bf00      	nop
    2094:	00002c10 	.word	0x00002c10
    2098:	00002c10 	.word	0x00002c10
    209c:	00002c18 	.word	0x00002c18
    20a0:	00002c10 	.word	0x00002c10

000020a4 <malloc>:
    20a4:	4b02      	ldr	r3, [pc, #8]	; (20b0 <malloc+0xc>)
    20a6:	4601      	mov	r1, r0
    20a8:	6818      	ldr	r0, [r3, #0]
    20aa:	f000 b803 	b.w	20b4 <_malloc_r>
    20ae:	bf00      	nop
    20b0:	1fff0bd0 	.word	0x1fff0bd0

000020b4 <_malloc_r>:
    20b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20b8:	f101 050b 	add.w	r5, r1, #11
    20bc:	2d16      	cmp	r5, #22
    20be:	b083      	sub	sp, #12
    20c0:	4606      	mov	r6, r0
    20c2:	f240 809f 	bls.w	2204 <_malloc_r+0x150>
    20c6:	f035 0507 	bics.w	r5, r5, #7
    20ca:	f100 80bf 	bmi.w	224c <_malloc_r+0x198>
    20ce:	42a9      	cmp	r1, r5
    20d0:	f200 80bc 	bhi.w	224c <_malloc_r+0x198>
    20d4:	f000 faa6 	bl	2624 <__malloc_lock>
    20d8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    20dc:	f0c0 829c 	bcc.w	2618 <_malloc_r+0x564>
    20e0:	0a6b      	lsrs	r3, r5, #9
    20e2:	f000 80ba 	beq.w	225a <_malloc_r+0x1a6>
    20e6:	2b04      	cmp	r3, #4
    20e8:	f200 8183 	bhi.w	23f2 <_malloc_r+0x33e>
    20ec:	09a8      	lsrs	r0, r5, #6
    20ee:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    20f2:	ea4f 034e 	mov.w	r3, lr, lsl #1
    20f6:	3038      	adds	r0, #56	; 0x38
    20f8:	4fc4      	ldr	r7, [pc, #784]	; (240c <_malloc_r+0x358>)
    20fa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    20fe:	f1a3 0108 	sub.w	r1, r3, #8
    2102:	685c      	ldr	r4, [r3, #4]
    2104:	42a1      	cmp	r1, r4
    2106:	d107      	bne.n	2118 <_malloc_r+0x64>
    2108:	e0ac      	b.n	2264 <_malloc_r+0x1b0>
    210a:	2a00      	cmp	r2, #0
    210c:	f280 80ac 	bge.w	2268 <_malloc_r+0x1b4>
    2110:	68e4      	ldr	r4, [r4, #12]
    2112:	42a1      	cmp	r1, r4
    2114:	f000 80a6 	beq.w	2264 <_malloc_r+0x1b0>
    2118:	6863      	ldr	r3, [r4, #4]
    211a:	f023 0303 	bic.w	r3, r3, #3
    211e:	1b5a      	subs	r2, r3, r5
    2120:	2a0f      	cmp	r2, #15
    2122:	ddf2      	ble.n	210a <_malloc_r+0x56>
    2124:	49b9      	ldr	r1, [pc, #740]	; (240c <_malloc_r+0x358>)
    2126:	693c      	ldr	r4, [r7, #16]
    2128:	f101 0e08 	add.w	lr, r1, #8
    212c:	4574      	cmp	r4, lr
    212e:	f000 81b3 	beq.w	2498 <_malloc_r+0x3e4>
    2132:	6863      	ldr	r3, [r4, #4]
    2134:	f023 0303 	bic.w	r3, r3, #3
    2138:	1b5a      	subs	r2, r3, r5
    213a:	2a0f      	cmp	r2, #15
    213c:	f300 8199 	bgt.w	2472 <_malloc_r+0x3be>
    2140:	2a00      	cmp	r2, #0
    2142:	f8c1 e014 	str.w	lr, [r1, #20]
    2146:	f8c1 e010 	str.w	lr, [r1, #16]
    214a:	f280 809e 	bge.w	228a <_malloc_r+0x1d6>
    214e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2152:	f080 8167 	bcs.w	2424 <_malloc_r+0x370>
    2156:	08db      	lsrs	r3, r3, #3
    2158:	f103 0c01 	add.w	ip, r3, #1
    215c:	2201      	movs	r2, #1
    215e:	109b      	asrs	r3, r3, #2
    2160:	fa02 f303 	lsl.w	r3, r2, r3
    2164:	684a      	ldr	r2, [r1, #4]
    2166:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    216a:	f8c4 8008 	str.w	r8, [r4, #8]
    216e:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    2172:	431a      	orrs	r2, r3
    2174:	f1a9 0308 	sub.w	r3, r9, #8
    2178:	60e3      	str	r3, [r4, #12]
    217a:	604a      	str	r2, [r1, #4]
    217c:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    2180:	f8c8 400c 	str.w	r4, [r8, #12]
    2184:	1083      	asrs	r3, r0, #2
    2186:	2401      	movs	r4, #1
    2188:	409c      	lsls	r4, r3
    218a:	4294      	cmp	r4, r2
    218c:	f200 808a 	bhi.w	22a4 <_malloc_r+0x1f0>
    2190:	4214      	tst	r4, r2
    2192:	d106      	bne.n	21a2 <_malloc_r+0xee>
    2194:	f020 0003 	bic.w	r0, r0, #3
    2198:	0064      	lsls	r4, r4, #1
    219a:	4214      	tst	r4, r2
    219c:	f100 0004 	add.w	r0, r0, #4
    21a0:	d0fa      	beq.n	2198 <_malloc_r+0xe4>
    21a2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    21a6:	46cc      	mov	ip, r9
    21a8:	4680      	mov	r8, r0
    21aa:	f8dc 100c 	ldr.w	r1, [ip, #12]
    21ae:	458c      	cmp	ip, r1
    21b0:	d107      	bne.n	21c2 <_malloc_r+0x10e>
    21b2:	e173      	b.n	249c <_malloc_r+0x3e8>
    21b4:	2a00      	cmp	r2, #0
    21b6:	f280 8181 	bge.w	24bc <_malloc_r+0x408>
    21ba:	68c9      	ldr	r1, [r1, #12]
    21bc:	458c      	cmp	ip, r1
    21be:	f000 816d 	beq.w	249c <_malloc_r+0x3e8>
    21c2:	684b      	ldr	r3, [r1, #4]
    21c4:	f023 0303 	bic.w	r3, r3, #3
    21c8:	1b5a      	subs	r2, r3, r5
    21ca:	2a0f      	cmp	r2, #15
    21cc:	ddf2      	ble.n	21b4 <_malloc_r+0x100>
    21ce:	460c      	mov	r4, r1
    21d0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    21d4:	f854 8f08 	ldr.w	r8, [r4, #8]!
    21d8:	194b      	adds	r3, r1, r5
    21da:	f045 0501 	orr.w	r5, r5, #1
    21de:	604d      	str	r5, [r1, #4]
    21e0:	f042 0101 	orr.w	r1, r2, #1
    21e4:	f8c8 c00c 	str.w	ip, [r8, #12]
    21e8:	4630      	mov	r0, r6
    21ea:	f8cc 8008 	str.w	r8, [ip, #8]
    21ee:	617b      	str	r3, [r7, #20]
    21f0:	613b      	str	r3, [r7, #16]
    21f2:	f8c3 e00c 	str.w	lr, [r3, #12]
    21f6:	f8c3 e008 	str.w	lr, [r3, #8]
    21fa:	6059      	str	r1, [r3, #4]
    21fc:	509a      	str	r2, [r3, r2]
    21fe:	f000 fa13 	bl	2628 <__malloc_unlock>
    2202:	e01f      	b.n	2244 <_malloc_r+0x190>
    2204:	2910      	cmp	r1, #16
    2206:	d821      	bhi.n	224c <_malloc_r+0x198>
    2208:	f000 fa0c 	bl	2624 <__malloc_lock>
    220c:	2510      	movs	r5, #16
    220e:	2306      	movs	r3, #6
    2210:	2002      	movs	r0, #2
    2212:	4f7e      	ldr	r7, [pc, #504]	; (240c <_malloc_r+0x358>)
    2214:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    2218:	f1a3 0208 	sub.w	r2, r3, #8
    221c:	685c      	ldr	r4, [r3, #4]
    221e:	4294      	cmp	r4, r2
    2220:	f000 8145 	beq.w	24ae <_malloc_r+0x3fa>
    2224:	6863      	ldr	r3, [r4, #4]
    2226:	68e1      	ldr	r1, [r4, #12]
    2228:	68a5      	ldr	r5, [r4, #8]
    222a:	f023 0303 	bic.w	r3, r3, #3
    222e:	4423      	add	r3, r4
    2230:	4630      	mov	r0, r6
    2232:	685a      	ldr	r2, [r3, #4]
    2234:	60e9      	str	r1, [r5, #12]
    2236:	f042 0201 	orr.w	r2, r2, #1
    223a:	608d      	str	r5, [r1, #8]
    223c:	605a      	str	r2, [r3, #4]
    223e:	f000 f9f3 	bl	2628 <__malloc_unlock>
    2242:	3408      	adds	r4, #8
    2244:	4620      	mov	r0, r4
    2246:	b003      	add	sp, #12
    2248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    224c:	2400      	movs	r4, #0
    224e:	230c      	movs	r3, #12
    2250:	4620      	mov	r0, r4
    2252:	6033      	str	r3, [r6, #0]
    2254:	b003      	add	sp, #12
    2256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    225a:	2380      	movs	r3, #128	; 0x80
    225c:	f04f 0e40 	mov.w	lr, #64	; 0x40
    2260:	203f      	movs	r0, #63	; 0x3f
    2262:	e749      	b.n	20f8 <_malloc_r+0x44>
    2264:	4670      	mov	r0, lr
    2266:	e75d      	b.n	2124 <_malloc_r+0x70>
    2268:	4423      	add	r3, r4
    226a:	68e1      	ldr	r1, [r4, #12]
    226c:	685a      	ldr	r2, [r3, #4]
    226e:	68a5      	ldr	r5, [r4, #8]
    2270:	f042 0201 	orr.w	r2, r2, #1
    2274:	60e9      	str	r1, [r5, #12]
    2276:	4630      	mov	r0, r6
    2278:	608d      	str	r5, [r1, #8]
    227a:	605a      	str	r2, [r3, #4]
    227c:	f000 f9d4 	bl	2628 <__malloc_unlock>
    2280:	3408      	adds	r4, #8
    2282:	4620      	mov	r0, r4
    2284:	b003      	add	sp, #12
    2286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    228a:	4423      	add	r3, r4
    228c:	4630      	mov	r0, r6
    228e:	685a      	ldr	r2, [r3, #4]
    2290:	f042 0201 	orr.w	r2, r2, #1
    2294:	605a      	str	r2, [r3, #4]
    2296:	f000 f9c7 	bl	2628 <__malloc_unlock>
    229a:	3408      	adds	r4, #8
    229c:	4620      	mov	r0, r4
    229e:	b003      	add	sp, #12
    22a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22a4:	68bc      	ldr	r4, [r7, #8]
    22a6:	6863      	ldr	r3, [r4, #4]
    22a8:	f023 0803 	bic.w	r8, r3, #3
    22ac:	45a8      	cmp	r8, r5
    22ae:	d304      	bcc.n	22ba <_malloc_r+0x206>
    22b0:	ebc5 0308 	rsb	r3, r5, r8
    22b4:	2b0f      	cmp	r3, #15
    22b6:	f300 808c 	bgt.w	23d2 <_malloc_r+0x31e>
    22ba:	4b55      	ldr	r3, [pc, #340]	; (2410 <_malloc_r+0x35c>)
    22bc:	f8df 9160 	ldr.w	r9, [pc, #352]	; 2420 <_malloc_r+0x36c>
    22c0:	681a      	ldr	r2, [r3, #0]
    22c2:	f8d9 3000 	ldr.w	r3, [r9]
    22c6:	3301      	adds	r3, #1
    22c8:	442a      	add	r2, r5
    22ca:	eb04 0a08 	add.w	sl, r4, r8
    22ce:	f000 8160 	beq.w	2592 <_malloc_r+0x4de>
    22d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    22d6:	320f      	adds	r2, #15
    22d8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    22dc:	f022 020f 	bic.w	r2, r2, #15
    22e0:	4611      	mov	r1, r2
    22e2:	4630      	mov	r0, r6
    22e4:	9201      	str	r2, [sp, #4]
    22e6:	f000 f9a1 	bl	262c <_sbrk_r>
    22ea:	f1b0 3fff 	cmp.w	r0, #4294967295
    22ee:	4683      	mov	fp, r0
    22f0:	9a01      	ldr	r2, [sp, #4]
    22f2:	f000 8158 	beq.w	25a6 <_malloc_r+0x4f2>
    22f6:	4582      	cmp	sl, r0
    22f8:	f200 80fc 	bhi.w	24f4 <_malloc_r+0x440>
    22fc:	4b45      	ldr	r3, [pc, #276]	; (2414 <_malloc_r+0x360>)
    22fe:	6819      	ldr	r1, [r3, #0]
    2300:	45da      	cmp	sl, fp
    2302:	4411      	add	r1, r2
    2304:	6019      	str	r1, [r3, #0]
    2306:	f000 8153 	beq.w	25b0 <_malloc_r+0x4fc>
    230a:	f8d9 0000 	ldr.w	r0, [r9]
    230e:	f8df e110 	ldr.w	lr, [pc, #272]	; 2420 <_malloc_r+0x36c>
    2312:	3001      	adds	r0, #1
    2314:	bf1b      	ittet	ne
    2316:	ebca 0a0b 	rsbne	sl, sl, fp
    231a:	4451      	addne	r1, sl
    231c:	f8ce b000 	streq.w	fp, [lr]
    2320:	6019      	strne	r1, [r3, #0]
    2322:	f01b 0107 	ands.w	r1, fp, #7
    2326:	f000 8117 	beq.w	2558 <_malloc_r+0x4a4>
    232a:	f1c1 0008 	rsb	r0, r1, #8
    232e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    2332:	4483      	add	fp, r0
    2334:	3108      	adds	r1, #8
    2336:	445a      	add	r2, fp
    2338:	f3c2 020b 	ubfx	r2, r2, #0, #12
    233c:	ebc2 0901 	rsb	r9, r2, r1
    2340:	4649      	mov	r1, r9
    2342:	4630      	mov	r0, r6
    2344:	9301      	str	r3, [sp, #4]
    2346:	f000 f971 	bl	262c <_sbrk_r>
    234a:	1c43      	adds	r3, r0, #1
    234c:	9b01      	ldr	r3, [sp, #4]
    234e:	f000 813f 	beq.w	25d0 <_malloc_r+0x51c>
    2352:	ebcb 0200 	rsb	r2, fp, r0
    2356:	444a      	add	r2, r9
    2358:	f042 0201 	orr.w	r2, r2, #1
    235c:	6819      	ldr	r1, [r3, #0]
    235e:	f8c7 b008 	str.w	fp, [r7, #8]
    2362:	4449      	add	r1, r9
    2364:	42bc      	cmp	r4, r7
    2366:	f8cb 2004 	str.w	r2, [fp, #4]
    236a:	6019      	str	r1, [r3, #0]
    236c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 2414 <_malloc_r+0x360>
    2370:	d016      	beq.n	23a0 <_malloc_r+0x2ec>
    2372:	f1b8 0f0f 	cmp.w	r8, #15
    2376:	f240 80fd 	bls.w	2574 <_malloc_r+0x4c0>
    237a:	6862      	ldr	r2, [r4, #4]
    237c:	f1a8 030c 	sub.w	r3, r8, #12
    2380:	f023 0307 	bic.w	r3, r3, #7
    2384:	18e0      	adds	r0, r4, r3
    2386:	f002 0201 	and.w	r2, r2, #1
    238a:	f04f 0e05 	mov.w	lr, #5
    238e:	431a      	orrs	r2, r3
    2390:	2b0f      	cmp	r3, #15
    2392:	6062      	str	r2, [r4, #4]
    2394:	f8c0 e004 	str.w	lr, [r0, #4]
    2398:	f8c0 e008 	str.w	lr, [r0, #8]
    239c:	f200 811c 	bhi.w	25d8 <_malloc_r+0x524>
    23a0:	4b1d      	ldr	r3, [pc, #116]	; (2418 <_malloc_r+0x364>)
    23a2:	68bc      	ldr	r4, [r7, #8]
    23a4:	681a      	ldr	r2, [r3, #0]
    23a6:	4291      	cmp	r1, r2
    23a8:	bf88      	it	hi
    23aa:	6019      	strhi	r1, [r3, #0]
    23ac:	4b1b      	ldr	r3, [pc, #108]	; (241c <_malloc_r+0x368>)
    23ae:	681a      	ldr	r2, [r3, #0]
    23b0:	4291      	cmp	r1, r2
    23b2:	6862      	ldr	r2, [r4, #4]
    23b4:	bf88      	it	hi
    23b6:	6019      	strhi	r1, [r3, #0]
    23b8:	f022 0203 	bic.w	r2, r2, #3
    23bc:	4295      	cmp	r5, r2
    23be:	eba2 0305 	sub.w	r3, r2, r5
    23c2:	d801      	bhi.n	23c8 <_malloc_r+0x314>
    23c4:	2b0f      	cmp	r3, #15
    23c6:	dc04      	bgt.n	23d2 <_malloc_r+0x31e>
    23c8:	4630      	mov	r0, r6
    23ca:	f000 f92d 	bl	2628 <__malloc_unlock>
    23ce:	2400      	movs	r4, #0
    23d0:	e738      	b.n	2244 <_malloc_r+0x190>
    23d2:	1962      	adds	r2, r4, r5
    23d4:	f043 0301 	orr.w	r3, r3, #1
    23d8:	f045 0501 	orr.w	r5, r5, #1
    23dc:	6065      	str	r5, [r4, #4]
    23de:	4630      	mov	r0, r6
    23e0:	60ba      	str	r2, [r7, #8]
    23e2:	6053      	str	r3, [r2, #4]
    23e4:	f000 f920 	bl	2628 <__malloc_unlock>
    23e8:	3408      	adds	r4, #8
    23ea:	4620      	mov	r0, r4
    23ec:	b003      	add	sp, #12
    23ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23f2:	2b14      	cmp	r3, #20
    23f4:	d971      	bls.n	24da <_malloc_r+0x426>
    23f6:	2b54      	cmp	r3, #84	; 0x54
    23f8:	f200 80a4 	bhi.w	2544 <_malloc_r+0x490>
    23fc:	0b28      	lsrs	r0, r5, #12
    23fe:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    2402:	ea4f 034e 	mov.w	r3, lr, lsl #1
    2406:	306e      	adds	r0, #110	; 0x6e
    2408:	e676      	b.n	20f8 <_malloc_r+0x44>
    240a:	bf00      	nop
    240c:	1fff0bd4 	.word	0x1fff0bd4
    2410:	1fff1424 	.word	0x1fff1424
    2414:	1fff1428 	.word	0x1fff1428
    2418:	1fff1420 	.word	0x1fff1420
    241c:	1fff141c 	.word	0x1fff141c
    2420:	1fff0fe0 	.word	0x1fff0fe0
    2424:	0a5a      	lsrs	r2, r3, #9
    2426:	2a04      	cmp	r2, #4
    2428:	d95e      	bls.n	24e8 <_malloc_r+0x434>
    242a:	2a14      	cmp	r2, #20
    242c:	f200 80b3 	bhi.w	2596 <_malloc_r+0x4e2>
    2430:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    2434:	0049      	lsls	r1, r1, #1
    2436:	325b      	adds	r2, #91	; 0x5b
    2438:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    243c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    2440:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 2620 <_malloc_r+0x56c>
    2444:	f1ac 0c08 	sub.w	ip, ip, #8
    2448:	458c      	cmp	ip, r1
    244a:	f000 8088 	beq.w	255e <_malloc_r+0x4aa>
    244e:	684a      	ldr	r2, [r1, #4]
    2450:	f022 0203 	bic.w	r2, r2, #3
    2454:	4293      	cmp	r3, r2
    2456:	d202      	bcs.n	245e <_malloc_r+0x3aa>
    2458:	6889      	ldr	r1, [r1, #8]
    245a:	458c      	cmp	ip, r1
    245c:	d1f7      	bne.n	244e <_malloc_r+0x39a>
    245e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    2462:	687a      	ldr	r2, [r7, #4]
    2464:	f8c4 c00c 	str.w	ip, [r4, #12]
    2468:	60a1      	str	r1, [r4, #8]
    246a:	f8cc 4008 	str.w	r4, [ip, #8]
    246e:	60cc      	str	r4, [r1, #12]
    2470:	e688      	b.n	2184 <_malloc_r+0xd0>
    2472:	1963      	adds	r3, r4, r5
    2474:	f042 0701 	orr.w	r7, r2, #1
    2478:	f045 0501 	orr.w	r5, r5, #1
    247c:	6065      	str	r5, [r4, #4]
    247e:	4630      	mov	r0, r6
    2480:	614b      	str	r3, [r1, #20]
    2482:	610b      	str	r3, [r1, #16]
    2484:	f8c3 e00c 	str.w	lr, [r3, #12]
    2488:	f8c3 e008 	str.w	lr, [r3, #8]
    248c:	605f      	str	r7, [r3, #4]
    248e:	509a      	str	r2, [r3, r2]
    2490:	3408      	adds	r4, #8
    2492:	f000 f8c9 	bl	2628 <__malloc_unlock>
    2496:	e6d5      	b.n	2244 <_malloc_r+0x190>
    2498:	684a      	ldr	r2, [r1, #4]
    249a:	e673      	b.n	2184 <_malloc_r+0xd0>
    249c:	f108 0801 	add.w	r8, r8, #1
    24a0:	f018 0f03 	tst.w	r8, #3
    24a4:	f10c 0c08 	add.w	ip, ip, #8
    24a8:	f47f ae7f 	bne.w	21aa <_malloc_r+0xf6>
    24ac:	e030      	b.n	2510 <_malloc_r+0x45c>
    24ae:	68dc      	ldr	r4, [r3, #12]
    24b0:	42a3      	cmp	r3, r4
    24b2:	bf08      	it	eq
    24b4:	3002      	addeq	r0, #2
    24b6:	f43f ae35 	beq.w	2124 <_malloc_r+0x70>
    24ba:	e6b3      	b.n	2224 <_malloc_r+0x170>
    24bc:	440b      	add	r3, r1
    24be:	460c      	mov	r4, r1
    24c0:	685a      	ldr	r2, [r3, #4]
    24c2:	68c9      	ldr	r1, [r1, #12]
    24c4:	f854 5f08 	ldr.w	r5, [r4, #8]!
    24c8:	f042 0201 	orr.w	r2, r2, #1
    24cc:	605a      	str	r2, [r3, #4]
    24ce:	4630      	mov	r0, r6
    24d0:	60e9      	str	r1, [r5, #12]
    24d2:	608d      	str	r5, [r1, #8]
    24d4:	f000 f8a8 	bl	2628 <__malloc_unlock>
    24d8:	e6b4      	b.n	2244 <_malloc_r+0x190>
    24da:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    24de:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    24e2:	ea4f 034e 	mov.w	r3, lr, lsl #1
    24e6:	e607      	b.n	20f8 <_malloc_r+0x44>
    24e8:	099a      	lsrs	r2, r3, #6
    24ea:	f102 0139 	add.w	r1, r2, #57	; 0x39
    24ee:	0049      	lsls	r1, r1, #1
    24f0:	3238      	adds	r2, #56	; 0x38
    24f2:	e7a1      	b.n	2438 <_malloc_r+0x384>
    24f4:	42bc      	cmp	r4, r7
    24f6:	4b4a      	ldr	r3, [pc, #296]	; (2620 <_malloc_r+0x56c>)
    24f8:	f43f af00 	beq.w	22fc <_malloc_r+0x248>
    24fc:	689c      	ldr	r4, [r3, #8]
    24fe:	6862      	ldr	r2, [r4, #4]
    2500:	f022 0203 	bic.w	r2, r2, #3
    2504:	e75a      	b.n	23bc <_malloc_r+0x308>
    2506:	f859 3908 	ldr.w	r3, [r9], #-8
    250a:	4599      	cmp	r9, r3
    250c:	f040 8082 	bne.w	2614 <_malloc_r+0x560>
    2510:	f010 0f03 	tst.w	r0, #3
    2514:	f100 30ff 	add.w	r0, r0, #4294967295
    2518:	d1f5      	bne.n	2506 <_malloc_r+0x452>
    251a:	687b      	ldr	r3, [r7, #4]
    251c:	ea23 0304 	bic.w	r3, r3, r4
    2520:	607b      	str	r3, [r7, #4]
    2522:	0064      	lsls	r4, r4, #1
    2524:	429c      	cmp	r4, r3
    2526:	f63f aebd 	bhi.w	22a4 <_malloc_r+0x1f0>
    252a:	2c00      	cmp	r4, #0
    252c:	f43f aeba 	beq.w	22a4 <_malloc_r+0x1f0>
    2530:	421c      	tst	r4, r3
    2532:	4640      	mov	r0, r8
    2534:	f47f ae35 	bne.w	21a2 <_malloc_r+0xee>
    2538:	0064      	lsls	r4, r4, #1
    253a:	421c      	tst	r4, r3
    253c:	f100 0004 	add.w	r0, r0, #4
    2540:	d0fa      	beq.n	2538 <_malloc_r+0x484>
    2542:	e62e      	b.n	21a2 <_malloc_r+0xee>
    2544:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    2548:	d818      	bhi.n	257c <_malloc_r+0x4c8>
    254a:	0be8      	lsrs	r0, r5, #15
    254c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    2550:	ea4f 034e 	mov.w	r3, lr, lsl #1
    2554:	3077      	adds	r0, #119	; 0x77
    2556:	e5cf      	b.n	20f8 <_malloc_r+0x44>
    2558:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    255c:	e6eb      	b.n	2336 <_malloc_r+0x282>
    255e:	2101      	movs	r1, #1
    2560:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2564:	1092      	asrs	r2, r2, #2
    2566:	fa01 f202 	lsl.w	r2, r1, r2
    256a:	431a      	orrs	r2, r3
    256c:	f8c8 2004 	str.w	r2, [r8, #4]
    2570:	4661      	mov	r1, ip
    2572:	e777      	b.n	2464 <_malloc_r+0x3b0>
    2574:	2301      	movs	r3, #1
    2576:	f8cb 3004 	str.w	r3, [fp, #4]
    257a:	e725      	b.n	23c8 <_malloc_r+0x314>
    257c:	f240 5254 	movw	r2, #1364	; 0x554
    2580:	4293      	cmp	r3, r2
    2582:	d820      	bhi.n	25c6 <_malloc_r+0x512>
    2584:	0ca8      	lsrs	r0, r5, #18
    2586:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    258a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    258e:	307c      	adds	r0, #124	; 0x7c
    2590:	e5b2      	b.n	20f8 <_malloc_r+0x44>
    2592:	3210      	adds	r2, #16
    2594:	e6a4      	b.n	22e0 <_malloc_r+0x22c>
    2596:	2a54      	cmp	r2, #84	; 0x54
    2598:	d826      	bhi.n	25e8 <_malloc_r+0x534>
    259a:	0b1a      	lsrs	r2, r3, #12
    259c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    25a0:	0049      	lsls	r1, r1, #1
    25a2:	326e      	adds	r2, #110	; 0x6e
    25a4:	e748      	b.n	2438 <_malloc_r+0x384>
    25a6:	68bc      	ldr	r4, [r7, #8]
    25a8:	6862      	ldr	r2, [r4, #4]
    25aa:	f022 0203 	bic.w	r2, r2, #3
    25ae:	e705      	b.n	23bc <_malloc_r+0x308>
    25b0:	f3ca 000b 	ubfx	r0, sl, #0, #12
    25b4:	2800      	cmp	r0, #0
    25b6:	f47f aea8 	bne.w	230a <_malloc_r+0x256>
    25ba:	4442      	add	r2, r8
    25bc:	68bb      	ldr	r3, [r7, #8]
    25be:	f042 0201 	orr.w	r2, r2, #1
    25c2:	605a      	str	r2, [r3, #4]
    25c4:	e6ec      	b.n	23a0 <_malloc_r+0x2ec>
    25c6:	23fe      	movs	r3, #254	; 0xfe
    25c8:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    25cc:	207e      	movs	r0, #126	; 0x7e
    25ce:	e593      	b.n	20f8 <_malloc_r+0x44>
    25d0:	2201      	movs	r2, #1
    25d2:	f04f 0900 	mov.w	r9, #0
    25d6:	e6c1      	b.n	235c <_malloc_r+0x2a8>
    25d8:	f104 0108 	add.w	r1, r4, #8
    25dc:	4630      	mov	r0, r6
    25de:	f000 f8a9 	bl	2734 <_free_r>
    25e2:	f8d9 1000 	ldr.w	r1, [r9]
    25e6:	e6db      	b.n	23a0 <_malloc_r+0x2ec>
    25e8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    25ec:	d805      	bhi.n	25fa <_malloc_r+0x546>
    25ee:	0bda      	lsrs	r2, r3, #15
    25f0:	f102 0178 	add.w	r1, r2, #120	; 0x78
    25f4:	0049      	lsls	r1, r1, #1
    25f6:	3277      	adds	r2, #119	; 0x77
    25f8:	e71e      	b.n	2438 <_malloc_r+0x384>
    25fa:	f240 5154 	movw	r1, #1364	; 0x554
    25fe:	428a      	cmp	r2, r1
    2600:	d805      	bhi.n	260e <_malloc_r+0x55a>
    2602:	0c9a      	lsrs	r2, r3, #18
    2604:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    2608:	0049      	lsls	r1, r1, #1
    260a:	327c      	adds	r2, #124	; 0x7c
    260c:	e714      	b.n	2438 <_malloc_r+0x384>
    260e:	21fe      	movs	r1, #254	; 0xfe
    2610:	227e      	movs	r2, #126	; 0x7e
    2612:	e711      	b.n	2438 <_malloc_r+0x384>
    2614:	687b      	ldr	r3, [r7, #4]
    2616:	e784      	b.n	2522 <_malloc_r+0x46e>
    2618:	08e8      	lsrs	r0, r5, #3
    261a:	1c43      	adds	r3, r0, #1
    261c:	005b      	lsls	r3, r3, #1
    261e:	e5f8      	b.n	2212 <_malloc_r+0x15e>
    2620:	1fff0bd4 	.word	0x1fff0bd4

00002624 <__malloc_lock>:
    2624:	4770      	bx	lr
    2626:	bf00      	nop

00002628 <__malloc_unlock>:
    2628:	4770      	bx	lr
    262a:	bf00      	nop

0000262c <_sbrk_r>:
    262c:	b538      	push	{r3, r4, r5, lr}
    262e:	4c07      	ldr	r4, [pc, #28]	; (264c <_sbrk_r+0x20>)
    2630:	2300      	movs	r3, #0
    2632:	4605      	mov	r5, r0
    2634:	4608      	mov	r0, r1
    2636:	6023      	str	r3, [r4, #0]
    2638:	f7fd ff62 	bl	500 <_sbrk>
    263c:	1c43      	adds	r3, r0, #1
    263e:	d000      	beq.n	2642 <_sbrk_r+0x16>
    2640:	bd38      	pop	{r3, r4, r5, pc}
    2642:	6823      	ldr	r3, [r4, #0]
    2644:	2b00      	cmp	r3, #0
    2646:	d0fb      	beq.n	2640 <_sbrk_r+0x14>
    2648:	602b      	str	r3, [r5, #0]
    264a:	bd38      	pop	{r3, r4, r5, pc}
    264c:	1fff1464 	.word	0x1fff1464

00002650 <register_fini>:
    2650:	4b02      	ldr	r3, [pc, #8]	; (265c <register_fini+0xc>)
    2652:	b113      	cbz	r3, 265a <register_fini+0xa>
    2654:	4802      	ldr	r0, [pc, #8]	; (2660 <register_fini+0x10>)
    2656:	f000 b805 	b.w	2664 <atexit>
    265a:	4770      	bx	lr
    265c:	00000000 	.word	0x00000000
    2660:	00002671 	.word	0x00002671

00002664 <atexit>:
    2664:	2300      	movs	r3, #0
    2666:	4601      	mov	r1, r0
    2668:	461a      	mov	r2, r3
    266a:	4618      	mov	r0, r3
    266c:	f000 b94a 	b.w	2904 <__register_exitproc>

00002670 <__libc_fini_array>:
    2670:	b538      	push	{r3, r4, r5, lr}
    2672:	4d07      	ldr	r5, [pc, #28]	; (2690 <__libc_fini_array+0x20>)
    2674:	4c07      	ldr	r4, [pc, #28]	; (2694 <__libc_fini_array+0x24>)
    2676:	1b2c      	subs	r4, r5, r4
    2678:	10a4      	asrs	r4, r4, #2
    267a:	d005      	beq.n	2688 <__libc_fini_array+0x18>
    267c:	3c01      	subs	r4, #1
    267e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    2682:	4798      	blx	r3
    2684:	2c00      	cmp	r4, #0
    2686:	d1f9      	bne.n	267c <__libc_fini_array+0xc>
    2688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    268c:	f000 bac4 	b.w	2c18 <__init_array_end>
	...

00002698 <_malloc_trim_r>:
    2698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    269a:	4f23      	ldr	r7, [pc, #140]	; (2728 <_malloc_trim_r+0x90>)
    269c:	460c      	mov	r4, r1
    269e:	4606      	mov	r6, r0
    26a0:	f7ff ffc0 	bl	2624 <__malloc_lock>
    26a4:	68bb      	ldr	r3, [r7, #8]
    26a6:	685d      	ldr	r5, [r3, #4]
    26a8:	f025 0503 	bic.w	r5, r5, #3
    26ac:	1b29      	subs	r1, r5, r4
    26ae:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    26b2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    26b6:	f021 010f 	bic.w	r1, r1, #15
    26ba:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    26be:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    26c2:	db07      	blt.n	26d4 <_malloc_trim_r+0x3c>
    26c4:	2100      	movs	r1, #0
    26c6:	4630      	mov	r0, r6
    26c8:	f7ff ffb0 	bl	262c <_sbrk_r>
    26cc:	68bb      	ldr	r3, [r7, #8]
    26ce:	442b      	add	r3, r5
    26d0:	4298      	cmp	r0, r3
    26d2:	d004      	beq.n	26de <_malloc_trim_r+0x46>
    26d4:	4630      	mov	r0, r6
    26d6:	f7ff ffa7 	bl	2628 <__malloc_unlock>
    26da:	2000      	movs	r0, #0
    26dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26de:	4261      	negs	r1, r4
    26e0:	4630      	mov	r0, r6
    26e2:	f7ff ffa3 	bl	262c <_sbrk_r>
    26e6:	3001      	adds	r0, #1
    26e8:	d00d      	beq.n	2706 <_malloc_trim_r+0x6e>
    26ea:	4b10      	ldr	r3, [pc, #64]	; (272c <_malloc_trim_r+0x94>)
    26ec:	68ba      	ldr	r2, [r7, #8]
    26ee:	6819      	ldr	r1, [r3, #0]
    26f0:	1b2d      	subs	r5, r5, r4
    26f2:	f045 0501 	orr.w	r5, r5, #1
    26f6:	4630      	mov	r0, r6
    26f8:	1b09      	subs	r1, r1, r4
    26fa:	6055      	str	r5, [r2, #4]
    26fc:	6019      	str	r1, [r3, #0]
    26fe:	f7ff ff93 	bl	2628 <__malloc_unlock>
    2702:	2001      	movs	r0, #1
    2704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2706:	2100      	movs	r1, #0
    2708:	4630      	mov	r0, r6
    270a:	f7ff ff8f 	bl	262c <_sbrk_r>
    270e:	68ba      	ldr	r2, [r7, #8]
    2710:	1a83      	subs	r3, r0, r2
    2712:	2b0f      	cmp	r3, #15
    2714:	ddde      	ble.n	26d4 <_malloc_trim_r+0x3c>
    2716:	4c06      	ldr	r4, [pc, #24]	; (2730 <_malloc_trim_r+0x98>)
    2718:	4904      	ldr	r1, [pc, #16]	; (272c <_malloc_trim_r+0x94>)
    271a:	6824      	ldr	r4, [r4, #0]
    271c:	f043 0301 	orr.w	r3, r3, #1
    2720:	1b00      	subs	r0, r0, r4
    2722:	6053      	str	r3, [r2, #4]
    2724:	6008      	str	r0, [r1, #0]
    2726:	e7d5      	b.n	26d4 <_malloc_trim_r+0x3c>
    2728:	1fff0bd4 	.word	0x1fff0bd4
    272c:	1fff1428 	.word	0x1fff1428
    2730:	1fff0fe0 	.word	0x1fff0fe0

00002734 <_free_r>:
    2734:	2900      	cmp	r1, #0
    2736:	d045      	beq.n	27c4 <_free_r+0x90>
    2738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    273c:	460d      	mov	r5, r1
    273e:	4680      	mov	r8, r0
    2740:	f7ff ff70 	bl	2624 <__malloc_lock>
    2744:	f855 7c04 	ldr.w	r7, [r5, #-4]
    2748:	496a      	ldr	r1, [pc, #424]	; (28f4 <_free_r+0x1c0>)
    274a:	f027 0301 	bic.w	r3, r7, #1
    274e:	f1a5 0408 	sub.w	r4, r5, #8
    2752:	18e2      	adds	r2, r4, r3
    2754:	688e      	ldr	r6, [r1, #8]
    2756:	6850      	ldr	r0, [r2, #4]
    2758:	42b2      	cmp	r2, r6
    275a:	f020 0003 	bic.w	r0, r0, #3
    275e:	d062      	beq.n	2826 <_free_r+0xf2>
    2760:	07fe      	lsls	r6, r7, #31
    2762:	6050      	str	r0, [r2, #4]
    2764:	d40b      	bmi.n	277e <_free_r+0x4a>
    2766:	f855 7c08 	ldr.w	r7, [r5, #-8]
    276a:	1be4      	subs	r4, r4, r7
    276c:	f101 0e08 	add.w	lr, r1, #8
    2770:	68a5      	ldr	r5, [r4, #8]
    2772:	4575      	cmp	r5, lr
    2774:	443b      	add	r3, r7
    2776:	d06f      	beq.n	2858 <_free_r+0x124>
    2778:	68e7      	ldr	r7, [r4, #12]
    277a:	60ef      	str	r7, [r5, #12]
    277c:	60bd      	str	r5, [r7, #8]
    277e:	1815      	adds	r5, r2, r0
    2780:	686d      	ldr	r5, [r5, #4]
    2782:	07ed      	lsls	r5, r5, #31
    2784:	d542      	bpl.n	280c <_free_r+0xd8>
    2786:	f043 0201 	orr.w	r2, r3, #1
    278a:	6062      	str	r2, [r4, #4]
    278c:	50e3      	str	r3, [r4, r3]
    278e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2792:	d218      	bcs.n	27c6 <_free_r+0x92>
    2794:	08db      	lsrs	r3, r3, #3
    2796:	1c5a      	adds	r2, r3, #1
    2798:	684d      	ldr	r5, [r1, #4]
    279a:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    279e:	60a7      	str	r7, [r4, #8]
    27a0:	2001      	movs	r0, #1
    27a2:	109b      	asrs	r3, r3, #2
    27a4:	fa00 f303 	lsl.w	r3, r0, r3
    27a8:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    27ac:	431d      	orrs	r5, r3
    27ae:	3808      	subs	r0, #8
    27b0:	60e0      	str	r0, [r4, #12]
    27b2:	604d      	str	r5, [r1, #4]
    27b4:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    27b8:	60fc      	str	r4, [r7, #12]
    27ba:	4640      	mov	r0, r8
    27bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    27c0:	f7ff bf32 	b.w	2628 <__malloc_unlock>
    27c4:	4770      	bx	lr
    27c6:	0a5a      	lsrs	r2, r3, #9
    27c8:	2a04      	cmp	r2, #4
    27ca:	d853      	bhi.n	2874 <_free_r+0x140>
    27cc:	099a      	lsrs	r2, r3, #6
    27ce:	f102 0739 	add.w	r7, r2, #57	; 0x39
    27d2:	007f      	lsls	r7, r7, #1
    27d4:	f102 0538 	add.w	r5, r2, #56	; 0x38
    27d8:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    27dc:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    27e0:	4944      	ldr	r1, [pc, #272]	; (28f4 <_free_r+0x1c0>)
    27e2:	3808      	subs	r0, #8
    27e4:	4290      	cmp	r0, r2
    27e6:	d04d      	beq.n	2884 <_free_r+0x150>
    27e8:	6851      	ldr	r1, [r2, #4]
    27ea:	f021 0103 	bic.w	r1, r1, #3
    27ee:	428b      	cmp	r3, r1
    27f0:	d202      	bcs.n	27f8 <_free_r+0xc4>
    27f2:	6892      	ldr	r2, [r2, #8]
    27f4:	4290      	cmp	r0, r2
    27f6:	d1f7      	bne.n	27e8 <_free_r+0xb4>
    27f8:	68d0      	ldr	r0, [r2, #12]
    27fa:	60e0      	str	r0, [r4, #12]
    27fc:	60a2      	str	r2, [r4, #8]
    27fe:	6084      	str	r4, [r0, #8]
    2800:	60d4      	str	r4, [r2, #12]
    2802:	4640      	mov	r0, r8
    2804:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2808:	f7ff bf0e 	b.w	2628 <__malloc_unlock>
    280c:	6895      	ldr	r5, [r2, #8]
    280e:	4f3a      	ldr	r7, [pc, #232]	; (28f8 <_free_r+0x1c4>)
    2810:	42bd      	cmp	r5, r7
    2812:	4403      	add	r3, r0
    2814:	d03f      	beq.n	2896 <_free_r+0x162>
    2816:	68d0      	ldr	r0, [r2, #12]
    2818:	60e8      	str	r0, [r5, #12]
    281a:	f043 0201 	orr.w	r2, r3, #1
    281e:	6085      	str	r5, [r0, #8]
    2820:	6062      	str	r2, [r4, #4]
    2822:	50e3      	str	r3, [r4, r3]
    2824:	e7b3      	b.n	278e <_free_r+0x5a>
    2826:	07ff      	lsls	r7, r7, #31
    2828:	4403      	add	r3, r0
    282a:	d407      	bmi.n	283c <_free_r+0x108>
    282c:	f855 2c08 	ldr.w	r2, [r5, #-8]
    2830:	1aa4      	subs	r4, r4, r2
    2832:	4413      	add	r3, r2
    2834:	68a0      	ldr	r0, [r4, #8]
    2836:	68e2      	ldr	r2, [r4, #12]
    2838:	60c2      	str	r2, [r0, #12]
    283a:	6090      	str	r0, [r2, #8]
    283c:	4a2f      	ldr	r2, [pc, #188]	; (28fc <_free_r+0x1c8>)
    283e:	6812      	ldr	r2, [r2, #0]
    2840:	f043 0001 	orr.w	r0, r3, #1
    2844:	4293      	cmp	r3, r2
    2846:	6060      	str	r0, [r4, #4]
    2848:	608c      	str	r4, [r1, #8]
    284a:	d3b6      	bcc.n	27ba <_free_r+0x86>
    284c:	4b2c      	ldr	r3, [pc, #176]	; (2900 <_free_r+0x1cc>)
    284e:	4640      	mov	r0, r8
    2850:	6819      	ldr	r1, [r3, #0]
    2852:	f7ff ff21 	bl	2698 <_malloc_trim_r>
    2856:	e7b0      	b.n	27ba <_free_r+0x86>
    2858:	1811      	adds	r1, r2, r0
    285a:	6849      	ldr	r1, [r1, #4]
    285c:	07c9      	lsls	r1, r1, #31
    285e:	d444      	bmi.n	28ea <_free_r+0x1b6>
    2860:	6891      	ldr	r1, [r2, #8]
    2862:	68d2      	ldr	r2, [r2, #12]
    2864:	60ca      	str	r2, [r1, #12]
    2866:	4403      	add	r3, r0
    2868:	f043 0001 	orr.w	r0, r3, #1
    286c:	6091      	str	r1, [r2, #8]
    286e:	6060      	str	r0, [r4, #4]
    2870:	50e3      	str	r3, [r4, r3]
    2872:	e7a2      	b.n	27ba <_free_r+0x86>
    2874:	2a14      	cmp	r2, #20
    2876:	d817      	bhi.n	28a8 <_free_r+0x174>
    2878:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    287c:	007f      	lsls	r7, r7, #1
    287e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    2882:	e7a9      	b.n	27d8 <_free_r+0xa4>
    2884:	10aa      	asrs	r2, r5, #2
    2886:	684b      	ldr	r3, [r1, #4]
    2888:	2501      	movs	r5, #1
    288a:	fa05 f202 	lsl.w	r2, r5, r2
    288e:	4313      	orrs	r3, r2
    2890:	604b      	str	r3, [r1, #4]
    2892:	4602      	mov	r2, r0
    2894:	e7b1      	b.n	27fa <_free_r+0xc6>
    2896:	f043 0201 	orr.w	r2, r3, #1
    289a:	614c      	str	r4, [r1, #20]
    289c:	610c      	str	r4, [r1, #16]
    289e:	60e5      	str	r5, [r4, #12]
    28a0:	60a5      	str	r5, [r4, #8]
    28a2:	6062      	str	r2, [r4, #4]
    28a4:	50e3      	str	r3, [r4, r3]
    28a6:	e788      	b.n	27ba <_free_r+0x86>
    28a8:	2a54      	cmp	r2, #84	; 0x54
    28aa:	d806      	bhi.n	28ba <_free_r+0x186>
    28ac:	0b1a      	lsrs	r2, r3, #12
    28ae:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    28b2:	007f      	lsls	r7, r7, #1
    28b4:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    28b8:	e78e      	b.n	27d8 <_free_r+0xa4>
    28ba:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    28be:	d806      	bhi.n	28ce <_free_r+0x19a>
    28c0:	0bda      	lsrs	r2, r3, #15
    28c2:	f102 0778 	add.w	r7, r2, #120	; 0x78
    28c6:	007f      	lsls	r7, r7, #1
    28c8:	f102 0577 	add.w	r5, r2, #119	; 0x77
    28cc:	e784      	b.n	27d8 <_free_r+0xa4>
    28ce:	f240 5054 	movw	r0, #1364	; 0x554
    28d2:	4282      	cmp	r2, r0
    28d4:	d806      	bhi.n	28e4 <_free_r+0x1b0>
    28d6:	0c9a      	lsrs	r2, r3, #18
    28d8:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    28dc:	007f      	lsls	r7, r7, #1
    28de:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    28e2:	e779      	b.n	27d8 <_free_r+0xa4>
    28e4:	27fe      	movs	r7, #254	; 0xfe
    28e6:	257e      	movs	r5, #126	; 0x7e
    28e8:	e776      	b.n	27d8 <_free_r+0xa4>
    28ea:	f043 0201 	orr.w	r2, r3, #1
    28ee:	6062      	str	r2, [r4, #4]
    28f0:	50e3      	str	r3, [r4, r3]
    28f2:	e762      	b.n	27ba <_free_r+0x86>
    28f4:	1fff0bd4 	.word	0x1fff0bd4
    28f8:	1fff0bdc 	.word	0x1fff0bdc
    28fc:	1fff0fdc 	.word	0x1fff0fdc
    2900:	1fff1424 	.word	0x1fff1424

00002904 <__register_exitproc>:
    2904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2908:	4c25      	ldr	r4, [pc, #148]	; (29a0 <__register_exitproc+0x9c>)
    290a:	6825      	ldr	r5, [r4, #0]
    290c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    2910:	4606      	mov	r6, r0
    2912:	4688      	mov	r8, r1
    2914:	4692      	mov	sl, r2
    2916:	4699      	mov	r9, r3
    2918:	b3c4      	cbz	r4, 298c <__register_exitproc+0x88>
    291a:	6860      	ldr	r0, [r4, #4]
    291c:	281f      	cmp	r0, #31
    291e:	dc17      	bgt.n	2950 <__register_exitproc+0x4c>
    2920:	1c43      	adds	r3, r0, #1
    2922:	b176      	cbz	r6, 2942 <__register_exitproc+0x3e>
    2924:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    2928:	2201      	movs	r2, #1
    292a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    292e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    2932:	4082      	lsls	r2, r0
    2934:	4311      	orrs	r1, r2
    2936:	2e02      	cmp	r6, #2
    2938:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    293c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    2940:	d01e      	beq.n	2980 <__register_exitproc+0x7c>
    2942:	3002      	adds	r0, #2
    2944:	6063      	str	r3, [r4, #4]
    2946:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    294a:	2000      	movs	r0, #0
    294c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2950:	4b14      	ldr	r3, [pc, #80]	; (29a4 <__register_exitproc+0xa0>)
    2952:	b303      	cbz	r3, 2996 <__register_exitproc+0x92>
    2954:	f44f 70c8 	mov.w	r0, #400	; 0x190
    2958:	f7ff fba4 	bl	20a4 <malloc>
    295c:	4604      	mov	r4, r0
    295e:	b1d0      	cbz	r0, 2996 <__register_exitproc+0x92>
    2960:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    2964:	2700      	movs	r7, #0
    2966:	e880 0088 	stmia.w	r0, {r3, r7}
    296a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    296e:	4638      	mov	r0, r7
    2970:	2301      	movs	r3, #1
    2972:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    2976:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    297a:	2e00      	cmp	r6, #0
    297c:	d0e1      	beq.n	2942 <__register_exitproc+0x3e>
    297e:	e7d1      	b.n	2924 <__register_exitproc+0x20>
    2980:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    2984:	430a      	orrs	r2, r1
    2986:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    298a:	e7da      	b.n	2942 <__register_exitproc+0x3e>
    298c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    2990:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    2994:	e7c1      	b.n	291a <__register_exitproc+0x16>
    2996:	f04f 30ff 	mov.w	r0, #4294967295
    299a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    299e:	bf00      	nop
    29a0:	00002c00 	.word	0x00002c00
    29a4:	000020a5 	.word	0x000020a5

000029a8 <digital_pin_to_info_PGM>:
    29a8:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
    29b8:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
    29c8:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
    29d8:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
    29e8:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
    29f8:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
    2a08:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
    2a18:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
    2a28:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
    2a38:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
    2a48:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
    2a58:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
    2a68:	43fe2068 4004d068 43fe0014 40049014     h .Ch..@...C...@
    2a78:	43fe0038 40049038 43fe003c 4004903c     8..C8..@<..C<..@
    2a88:	43fe0040 40049040 43fe0848 4004a048     @..C@..@H..CH..@
    2a98:	43fe084c 4004a04c 43fe0828 4004a028     L..CL..@(..C(..@
    2aa8:	43fe082c 4004a02c 43fe2060 4004d060     ,..C,..@` .C`..@
    2ab8:	43fe2064 4004d064 43fe1020 4004b020     d .Cd..@ ..C ..@
    2ac8:	43fe1024 4004b024 43fe1028 4004b028     $..C$..@(..C(..@
    2ad8:	43fe102c 4004b02c 43fe0044 40049044     ,..C,..@D..CD..@
    2ae8:	43fe0070 40049070 43fe0074 40049074     p..Cp..@t..Ct..@
    2af8:	43fe0068 40049068 43fe0850 4004a050     h..Ch..@P..CP..@
    2b08:	43fe0858 4004a058 43fe085c 4004a05c     X..CX..@\..C\..@
    2b18:	43fe0854 4004a054 43fe1820 4004c020     T..CT..@ ..C ..@
    2b28:	43fe1824 4004c024 43fe0810 4004a010     $..C$..@...C...@
    2b38:	43fe0814 4004a014 43fe1838 4004c038     ...C...@8..C8..@
    2b48:	43fe1834 4004c034 43fe1830 4004c030     4..C4..@0..C0..@
    2b58:	43fe183c 4004c03c 43fe182c 4004c02c     <..C<..@,..C,..@
    2b68:	43fe2028 4004d028 43fe202c 4004d02c     ( .C(..@, .C,..@
    2b78:	43fe2000 4004d000 43fe2004 4004d004     . .C...@. .C...@
    2b88:	43fe2008 4004d008 43fe200c 4004d00c     . .C...@. .C...@
    2b98:	43fe2010 4004d010 43fe2014 4004d014     . .C...@. .C...@

00002ba8 <usb_endpoint_config_table>:
    2ba8:	15191500                                ....

00002bac <usb_descriptor_list>:
    2bac:	00000100 1fff0704 00000012 00000200     ................
    2bbc:	1fff0730 00000043 00000300 1fff078c     0...C...........
    2bcc:	00000000 04090301 1fff0718 00000000     ................
    2bdc:	04090302 1fff0774 00000000 04090303     ....t...........
    2bec:	1fff0790 00000000 00000000 00000000     ................
    2bfc:	00000000                                ....

00002c00 <_global_impure_ptr>:
    2c00:	1fff07a8                                ....

00002c04 <_init>:
    2c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c06:	bf00      	nop
    2c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2c0a:	bc08      	pop	{r3}
    2c0c:	469e      	mov	lr, r3
    2c0e:	4770      	bx	lr

00002c10 <__init_array_start>:
    2c10:	00002651 	.word	0x00002651

00002c14 <__frame_dummy_init_array_entry>:
    2c14:	00000435                                5...

Disassembly of section .fini:

00002c18 <_fini>:
    2c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c1a:	bf00      	nop
